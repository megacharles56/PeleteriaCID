/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Paquete;

import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gloria
 */
public class EditarInventario extends javax.swing.JFrame {

    /**
     * Creates new form EditarInventario
     */
    public EditarInventario() {
        initComponents();
        txtMedidaEspesor.setEnabled(false);
                    txtMedidaLargo.setEnabled(false);
                    txtMedidaAncho.setEnabled(false);
                    txtModelo.setEnabled(false);
                    txtColor.setEnabled(false);
                    txtCantidad.setEnabled(false);
                    txtPrecio.setEnabled(false);
                    txtCosto.setEnabled(false);
                    txtArea.setEnabled(false);
                    txtMarca.setEnabled(false);
                    txtPrecio1.setEnabled(false);
                    txtPrecio2.setEnabled(false);
        this.getContentPane().setBackground(Color.WHITE);/*
        DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Tipo");
        modelo.addColumn("Marca");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Color");
        modelo.addColumn("Largo");
        modelo.addColumn("Ancho");
        modelo.addColumn("Espesor");
        modelo.addColumn("Costo");
        modelo.addColumn("Precio");
        modelo.addColumn("Notas");
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[11];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_MARCA, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_MEDIDA_LARGO,MATERIA_MEDIDA_ANCHO,MATERIA_MEDIDA_ESPESOR, MATERIA_COSTO,MATERIA_PRECIO,MATERIA_NOTAS"
                    + " FROM peleteriacid.materiales;";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=rs.getString(5);
                datos[5]=Float.toString(rs.getFloat(6));
                datos[6]=Float.toString(rs.getFloat(7));
                datos[7]=Float.toString(rs.getFloat(8));
                datos[8]=Double.toString(rs.getDouble(9));
                datos[9]=Double.toString(rs.getDouble(10));
                datos[10]=rs.getString(11);
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }*/
    }
    public void LimpiarCampos(){
        txtMedidaEspesor.setText("");
        txtModelo.setText("");
        txtCantidad.setText("");
        txtPrecio.setText("");
        txtMedidaLargo.setText("");
        txtMedidaAncho.setText("");
        txtColor.setText("");
        txtCosto.setText("");
        txtArea.setText("");
        txtMarca.setText("");
        txtPrecio1.setText("");
        txtPrecio2.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        Listar = new javax.swing.JMenuItem();
        jLabel9 = new javax.swing.JLabel();
        cmbTipo = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblLista = new javax.swing.JTable();
        lblEspesor = new javax.swing.JLabel();
        txtMedidaEspesor = new javax.swing.JTextField();
        lbModelo = new javax.swing.JLabel();
        lblAnchocm = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblLargocm = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblEspesorcm = new javax.swing.JLabel();
        lblColor = new javax.swing.JLabel();
        lblAncho = new javax.swing.JLabel();
        lblMedida = new javax.swing.JLabel();
        lblUnidades = new javax.swing.JLabel();
        txtModelo = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        txtPrecio = new javax.swing.JTextField();
        txtCosto = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtColor = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtMedidaAncho = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        lblLargo = new javax.swing.JLabel();
        lblMarca = new javax.swing.JLabel();
        txtMedidaLargo = new javax.swing.JTextField();
        txtMarca = new javax.swing.JTextField();
        btnActualizar = new javax.swing.JButton();
        lblLitros = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txtPrecio1 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        txtPrecio2 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();

        Listar.setText("Listar");
        Listar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListarActionPerformed(evt);
            }
        });
        jPopupMenu1.add(Listar);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 102, 204));
        jLabel9.setText("ACTUALIZACION DE INVENTARIO");

        cmbTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tipo de Material", "Agujas", "Agujetas", "Aseo", "Brochas y cepillos", "Carretes", "Cerco", "Cierres", "Clavos y tachuelas", "Correas y látigos", "Cámara de avión", "Fibras", "Grasas y ceras", "Hebillas y adornos", "Herramienta", "Hilos", "Lijas", "Pegamento", "Piel", "Pinturas", "Plantillas y taloneras", "Remaches", "Suelas", "Tacones", "Tapas y Firmes", "Tapetes", "Tintas" }));
        cmbTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTipoActionPerformed(evt);
            }
        });
        cmbTipo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                cmbTipoPropertyChange(evt);
            }
        });

        tblLista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblLista.setComponentPopupMenu(jPopupMenu1);
        jScrollPane2.setViewportView(tblLista);

        lblEspesor.setText("Espesor:");

        lbModelo.setText("Modelo:");

        lblAnchocm.setText("cm");

        jLabel2.setText("Cantidad existente:");

        lblLargocm.setText("cm");

        jLabel3.setText("Costo:");

        lblEspesorcm.setText("cm");

        lblColor.setText("Color:");

        lblAncho.setText("Ancho:");

        lblMedida.setText("Medidas:");

        lblUnidades.setText("Unidades");

        jLabel15.setText("Precio Venta:");

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel16.setText("$");

        jLabel5.setText("Notas:");

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane3.setViewportView(txtArea);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("$");

        lblLargo.setText("Largo:");

        lblMarca.setText("Marca:");

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        jLabel4.setText("Clic derecho en el material deseado");

        jLabel19.setText("Precio Unitario de venta a boleros:");

        txtPrecio1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPrecio1KeyReleased(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel21.setText("$");

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel23.setText("$");

        txtPrecio2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPrecio2KeyReleased(evt);
            }
        });

        jLabel22.setText("Precio Unitario de venta en mayoreo:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(116, 116, 116)
                                .addComponent(jLabel9))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addComponent(cmbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(123, 123, 123)
                                .addComponent(jLabel4)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGap(320, 320, 320)
                                            .addComponent(lblColor)
                                            .addGap(18, 18, 18)
                                            .addComponent(txtColor, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(20, 20, 20)
                                            .addComponent(jLabel6)
                                            .addGap(10, 10, 10)
                                            .addComponent(txtCosto, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel19)
                                            .addComponent(jLabel22))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabel21)
                                                .addGap(18, 18, 18)
                                                .addComponent(txtPrecio1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabel23)
                                                .addGap(18, 18, 18)
                                                .addComponent(txtPrecio2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel16)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbModelo)
                                .addGap(24, 24, 24)
                                .addComponent(txtModelo, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblLitros, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblMarca)
                                .addGap(29, 29, 29)
                                .addComponent(txtMarca, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(jLabel2)
                                .addGap(33, 33, 33)
                                .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblUnidades)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMedida)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblAncho)
                        .addGap(0, 0, 0)
                        .addComponent(txtMedidaAncho, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAnchocm)
                        .addGap(41, 41, 41)
                        .addComponent(lblLargo)
                        .addGap(2, 2, 2)
                        .addComponent(txtMedidaLargo, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblLargocm)
                        .addGap(32, 32, 32)
                        .addComponent(lblEspesor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMedidaEspesor, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblEspesorcm)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnActualizar)
                .addGap(110, 110, 110))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lbModelo)
                                .addComponent(txtModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblLitros, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMarca)
                            .addComponent(jLabel2)
                            .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUnidades))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)
                            .addComponent(txtCosto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblColor)
                            .addComponent(txtColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel16)
                                .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel15))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel19)
                                            .addComponent(jLabel21)
                                            .addComponent(txtPrecio1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel22))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtPrecio2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel23)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnActualizar)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblMedida)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMedidaAncho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAnchocm)
                            .addComponent(txtMedidaLargo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLargocm)
                            .addComponent(txtMedidaEspesor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLargo)
                            .addComponent(lblEspesor)
                            .addComponent(lblAncho)
                            .addComponent(lblEspesorcm))))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTipoActionPerformed
        int Tipo=cmbTipo.getSelectedIndex();
        switch (Tipo){
            case 1:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Largo");
                modelo.addColumn("Ancho");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[9];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_MEDIDA_LARGO, MATERIA_MEDIDA_ANCHO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Agujas';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Float.toString(rs.getFloat(3));
                        datos[3]=Float.toString(rs.getFloat(4));
                        datos[4]=Integer.toString(rs.getInt(5));
                        datos[5]=rs.getString(6);
                        datos[6]=Double.toString(rs.getDouble(7));
                        datos[7]=Double.toString(rs.getDouble(8));
                        datos[8]=rs.getString(9);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 2:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Medida");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[8];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_MEDIDA_LARGO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Agujetas';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Float.toString(rs.getFloat(3));
                        datos[3]=Integer.toString(rs.getInt(4));
                        datos[4]=rs.getString(5);
                        datos[5]=Double.toString(rs.getDouble(6));
                        datos[6]=Double.toString(rs.getDouble(7));
                        datos[7]=rs.getString(8);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 13:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Largo");
                modelo.addColumn("Ancho");

                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[9];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_MEDIDA_LARGO, MATERIA_MEDIDA_ANCHO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Hebillas y adornos';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Float.toString(rs.getFloat(3));
                        datos[3]=Float.toString(rs.getFloat(4));
                        datos[4]=Integer.toString(rs.getInt(5));
                        datos[5]=rs.getString(6);
                        datos[6]=Double.toString(rs.getDouble(7));
                        datos[7]=Double.toString(rs.getDouble(8));
                        datos[8]=rs.getString(9);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 19:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Litros");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Marca");
                modelo.addColumn("Notas");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[8];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_MARCA, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Pinturas';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Integer.toString(rs.getInt(3));
                        datos[3]=rs.getString(4);
                        datos[4]=Double.toString(rs.getDouble(5));
                        datos[5]=Double.toString(rs.getDouble(6));
                        datos[6]=rs.getString(7);
                        datos[7]=rs.getString(8);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 25:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[7];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Tapetes';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Integer.toString(rs.getInt(3));
                        datos[3]=rs.getString(4);
                        datos[4]=Double.toString(rs.getDouble(5));
                        datos[5]=Double.toString(rs.getDouble(6));
                        datos[6]=rs.getString(7);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 8:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Largo");
                modelo.addColumn("Ancho");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[9];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_MEDIDA_LARGO, MATERIA_MEDIDA_ANCHO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Clavos y tachuelas';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Float.toString(rs.getFloat(3));
                        datos[3]=Float.toString(rs.getFloat(4));
                        datos[4]=Integer.toString(rs.getInt(5));
                        datos[5]=rs.getString(6);
                        datos[6]=Double.toString(rs.getDouble(7));
                        datos[7]=Double.toString(rs.getDouble(8));
                        datos[8]=rs.getString(9);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 23:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Medida");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Marca");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[9];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_MEDIDA_LARGO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_MARCA, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Tacones';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Float.toString(rs.getFloat(3));
                        datos[3]=Integer.toString(rs.getInt(4));
                        datos[4]=rs.getString(5);
                        datos[5]=Double.toString(rs.getDouble(6));
                        datos[6]=Double.toString(rs.getDouble(7));
                        datos[7]=rs.getString(8);
                        datos[8]=rs.getString(9);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 9:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Tipo");
                modelo.addColumn("Medida");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[8];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_MEDIDA_LARGO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Correas y látigos';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Float.toString(rs.getFloat(3));
                        datos[3]=Integer.toString(rs.getInt(4));
                        datos[4]=rs.getString(5);
                        datos[5]=Double.toString(rs.getDouble(6));
                        datos[6]=Double.toString(rs.getDouble(7));
                        datos[7]=rs.getString(8);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 21:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Medida");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[7];

                sql="SELECT MATERIA_SKU, MATERIA_MEDIDA_LARGO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Remaches';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=Float.toString(rs.getFloat(2));
                        datos[2]=Integer.toString(rs.getInt(3));
                        datos[3]=rs.getString(4);
                        datos[4]=Double.toString(rs.getDouble(5));
                        datos[5]=Double.toString(rs.getDouble(6));
                        datos[6]=rs.getString(7);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 22:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Tipo");
                modelo.addColumn("Medida");
                modelo.addColumn("Pares");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Marca");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[9];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_MEDIDA_LARGO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_MARCA, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Suelas';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Float.toString(rs.getFloat(3));
                        datos[3]=Integer.toString(rs.getInt(4));
                        datos[4]=rs.getString(5);
                        datos[5]=Double.toString(rs.getDouble(6));
                        datos[6]=Double.toString(rs.getDouble(7));
                        datos[7]=rs.getString(8);
                        datos[8]=rs.getString(9);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 24:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Tipo");
                modelo.addColumn("Largo");
                modelo.addColumn("Ancho");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Marca");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[10];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_MEDIDA_LARGO, MATERIA_MEDIDA_ANCHO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_MARCA, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Tapas y firmes';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Float.toString(rs.getFloat(3));
                        datos[3]=Float.toString(rs.getFloat(4));
                        datos[4]=Integer.toString(rs.getInt(5));
                        datos[5]=rs.getString(6);
                        datos[6]=Double.toString(rs.getDouble(7));
                        datos[7]=Double.toString(rs.getDouble(8));
                        datos[8]=rs.getString(9);
                        datos[9]=rs.getString(10);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 12:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Contenido (Lt)");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Marca");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[8];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_MARCA, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Grasas y ceras';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Integer.toString(rs.getInt(3));
                        datos[3]=rs.getString(4);
                        datos[4]=Double.toString(rs.getDouble(5));
                        datos[5]=Double.toString(rs.getDouble(6));
                        datos[6]=rs.getString(7);
                        datos[7]=rs.getString(8);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 26:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Contenido (lt)");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Marca");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[8];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_MARCA, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Tintas';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Integer.toString(rs.getInt(3));
                        datos[3]=rs.getString(4);
                        datos[4]=Double.toString(rs.getDouble(5));
                        datos[5]=Double.toString(rs.getDouble(6));
                        datos[6]=rs.getString(7);
                        datos[7]=rs.getString(8);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 20:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Tipo");
                modelo.addColumn("Medida");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Marca");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[9];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_MEDIDA_LARGO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_MARCA, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Plantillas y taloneras';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Float.toString(rs.getFloat(3));
                        datos[3]=Integer.toString(rs.getInt(4));
                        datos[4]=rs.getString(5);
                        datos[5]=Double.toString(rs.getDouble(6));
                        datos[6]=Double.toString(rs.getDouble(7));
                        datos[7]=rs.getString(8);
                        datos[8]=rs.getString(9);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 15:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Medida");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Marca");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[9];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_MEDIDA_LARGO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_MARCA, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Hilos';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Float.toString(rs.getFloat(3));
                        datos[3]=Integer.toString(rs.getInt(4));
                        datos[4]=rs.getString(5);
                        datos[5]=Double.toString(rs.getDouble(6));
                        datos[6]=Double.toString(rs.getDouble(7));
                        datos[7]=rs.getString(8);
                        datos[8]=rs.getString(9);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 18:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Tipo");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[7];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Piel';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Integer.toString(rs.getInt(3));
                        datos[3]=rs.getString(4);
                        datos[4]=Double.toString(rs.getDouble(5));
                        datos[5]=Double.toString(rs.getDouble(6));
                        datos[6]=rs.getString(7);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 10:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Cámara de avión';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=Integer.toString(rs.getInt(2));
                        datos[2]=Double.toString(rs.getDouble(3));
                        datos[3]=Double.toString(rs.getDouble(4));
                        datos[4]=rs.getString(5);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 17:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Tipo");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Marca");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[8];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_MARCA, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Pegamento';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Integer.toString(rs.getInt(3));
                        datos[3]=rs.getString(4);
                        datos[4]=Double.toString(rs.getDouble(5));
                        datos[5]=Double.toString(rs.getDouble(6));
                        datos[6]=rs.getString(7);
                        datos[7]=rs.getString(8);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 7:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Medida");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[8];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_MEDIDA_LARGO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Cierres';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Float.toString(rs.getFloat(3));
                        datos[3]=Integer.toString(rs.getInt(4));
                        datos[4]=rs.getString(5);
                        datos[5]=Double.toString(rs.getDouble(6));
                        datos[6]=Double.toString(rs.getDouble(7));
                        datos[7]=rs.getString(8);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 4:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Medida");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Marca");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[9];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_MEDIDA_LARGO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_MARCA, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Brochas y cepillos';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Float.toString(rs.getFloat(3));
                        datos[3]=Integer.toString(rs.getInt(4));
                        datos[4]=rs.getString(5);
                        datos[5]=Double.toString(rs.getDouble(6));
                        datos[6]=Double.toString(rs.getDouble(7));
                        datos[7]=rs.getString(8);
                        datos[8]=rs.getString(9);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 11:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Tipo");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[7];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Fibras';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Integer.toString(rs.getInt(3));
                        datos[3]=rs.getString(4);
                        datos[4]=Double.toString(rs.getDouble(5));
                        datos[5]=Double.toString(rs.getDouble(6));
                        datos[6]=rs.getString(7);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 14:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Tipo");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[7];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Herramienta';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Integer.toString(rs.getInt(3));
                        datos[3]=rs.getString(4);
                        datos[4]=Double.toString(rs.getDouble(5));
                        datos[5]=Double.toString(rs.getDouble(6));
                        datos[6]=rs.getString(7);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 6:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[7];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Cerco';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Integer.toString(rs.getInt(3));
                        datos[3]=rs.getString(4);
                        datos[4]=Double.toString(rs.getDouble(5));
                        datos[5]=Double.toString(rs.getDouble(6));
                        datos[6]=rs.getString(7);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 16:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Medida");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Marca");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[9];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_MEDIDA_LARGO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_MARCA"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Lijas';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Float.toString(rs.getFloat(3));
                        datos[3]=Integer.toString(rs.getInt(4));
                        datos[4]=rs.getString(5);
                        datos[5]=Double.toString(rs.getDouble(6));
                        datos[6]=Double.toString(rs.getDouble(7));
                        datos[7]=rs.getString(8);
                        datos[8]=rs.getString(9);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 5:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Largo");
                modelo.addColumn("Ancho");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[9];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_MEDIDA_LARGO, MATERIA_MEDIDA_ANCHO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Carretes';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Float.toString(rs.getFloat(3));
                        datos[3]=Float.toString(rs.getFloat(4));
                        datos[4]=Integer.toString(rs.getInt(5));
                        datos[5]=rs.getString(6);
                        datos[6]=Double.toString(rs.getDouble(7));
                        datos[7]=Double.toString(rs.getDouble(8));
                        datos[8]=rs.getString(9);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 3:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Tipo");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Precio");
                modelo.addColumn("Costo");
                modelo.addColumn("Marca");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[8];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_MARCA, MATERIA_NOTAS"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Aseo';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Integer.toString(rs.getInt(3));
                        datos[3]=rs.getString(4);
                        datos[4]=Double.toString(rs.getDouble(5));
                        datos[5]=Double.toString(rs.getDouble(6));
                        datos[6]=rs.getString(7);
                        datos[7]=rs.getString(8);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            default:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Tipo");
                modelo.addColumn("Marca");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Color");
                modelo.addColumn("Largo");
                modelo.addColumn("Ancho");
                modelo.addColumn("Espesor");
                modelo.addColumn("Costo");
                modelo.addColumn("Precio");
                modelo.addColumn("Notas");
                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[11];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_MARCA, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_MEDIDA_LARGO,MATERIA_MEDIDA_ANCHO,MATERIA_MEDIDA_ESPESOR, MATERIA_COSTO,MATERIA_PRECIO,MATERIA_NOTAS"
                + " FROM peleteriacid.materiales;";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(3);
                        datos[3]=Integer.toString(rs.getInt(4));
                        datos[4]=rs.getString(5);
                        datos[5]=Float.toString(rs.getFloat(6));
                        datos[6]=Float.toString(rs.getFloat(7));
                        datos[7]=Float.toString(rs.getFloat(8));
                        datos[8]=Double.toString(rs.getDouble(9));
                        datos[9]=Double.toString(rs.getDouble(10));
                        datos[10]=rs.getString(11);
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            }
        }
        LimpiarCampos();
        lblColor.setVisible(true);
        txtColor.setVisible(true);
        txtMarca.setEnabled(true);
        txtArea.setEnabled(true);
        lblUnidades.setText("Unidades");
        lbModelo.setText("Modelo:");
        txtMedidaEspesor.setVisible(true);
        lblEspesor.setVisible(true);
        lblEspesorcm.setVisible(true);
        txtMedidaAncho.setVisible(true);
        lblAncho.setVisible(true);
        lblAnchocm.setVisible(true);
        txtMedidaLargo.setVisible(true);
        lblLargo.setVisible(true);
        lblLargocm.setVisible(true);
        lblMarca.setVisible(true);
        txtMarca.setVisible(true);
        lblMedida.setVisible(true);
        lblLitros.setText("");
        txtMedidaEspesor.setEnabled(false);
        txtMedidaLargo.setEnabled(false);
        txtMedidaAncho.setEnabled(false);
        txtModelo.setEnabled(false);
        txtColor.setEnabled(false);
        txtCantidad.setEnabled(false);
        txtPrecio.setEnabled(false);
        txtCosto.setEnabled(false);
        txtArea.setEnabled(false);
        txtMarca.setEnabled(false);
        txtPrecio1.setEnabled(false);
        txtPrecio2.setEnabled(false);
        
        switch (cmbTipo.getSelectedIndex()){
                case 1:{
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                lblMarca.setVisible(false);
                txtMarca.setVisible(false);
                lblColor.setVisible(false);
                txtColor.setVisible(false);
                break;
            }
            case 2:{
                lblUnidades.setText("Pares");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                break;
            }
            case 13:{
                txtMedidaEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                lblEspesor.setVisible(false);
                break;
            }
            case 19:{
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lblMedida.setVisible(false);
                lbModelo.setText("Contenido:");
                lblLitros.setText("Litros");
                break;
            }
            case 25:{
                lbModelo.setText("Tipo:");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lblMedida.setVisible(false);
                break;
            }
            case 8:{
                lblUnidades.setText("Kilos");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                break;
            }
            case 23:{
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                break;
            }
            case 9:{
                lblMarca.setVisible(false);
                txtMarca.setVisible(false);
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                break;
            }
            case 21:{
                lblMarca.setVisible(false);
                txtMarca.setVisible(false);
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                break;
            }
            case 22:{
                lblUnidades.setText("Pares");
                lbModelo.setText("Tipo:");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblLargo.setText("Numero:");
                lblAnchocm.setVisible(false);
                break;
            }
            case 24:{
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                break;
            }
            case 12:{
                lblColor.setVisible(false);
                txtColor.setVisible(false);
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lblMedida.setVisible(false);
                lbModelo.setText("Contenido:");
                lblLitros.setText("Litros");
                break;
            }
            case 26:{
                lbModelo.setText("Contenido:");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lblMedida.setVisible(false);
                lblLitros.setText("Litros");
                break;
            }
            case 20:{
                lbModelo.setText("Tipo:");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                break;
            }
            case 15:{
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                break;
            }
            case 18:{
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lblMedida.setVisible(false);
                lblMarca.setVisible(false);
                txtMarca.setVisible(false);
                break;
            }
            case 10:{
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lblMedida.setVisible(false);
                lblMarca.setVisible(false);
                txtMarca.setVisible(false);
                txtModelo.setVisible(false);
                lbModelo.setVisible(false);
                txtColor.setVisible(false);
                lblColor.setVisible(false);
                break;
            }
            case 17:{
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lblMedida.setVisible(false);
                lbModelo.setText("Contenido:");
                txtColor.setVisible(false);
                lblColor.setVisible(false);
                break;
            }
            case 7:{
                lbModelo.setText("Tipo:");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                lblMarca.setVisible(false);
                txtMarca.setVisible(false);

                break;
            }
            case 4:{
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                break;
            }
            case 11:{
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lbModelo.setText("Tipo:");
                lblMedida.setVisible(false);
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                lblMarca.setVisible(false);
                txtMarca.setVisible(false);
                break;
            }
            case 14:{
                lblMedida.setVisible(false);
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lbModelo.setText("Tipo:");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                lblMarca.setVisible(false);
                txtMarca.setVisible(false);
                break;
            }
            case 6:{
                lblMedida.setVisible(false);
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lbModelo.setText("Tipo:");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                lblMarca.setVisible(false);
                txtMarca.setVisible(false);
                break;
            }
            case 16:{
                lbModelo.setText("Tipo:");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                break;
            }
            case 5:{
                lbModelo.setText("Tipo:");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);

                break;
            }
            case 3:{
                lblMedida.setVisible(false);
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lbModelo.setText("Tipo:");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                break;
            }
            default:{
                break;
            }
            }
    }//GEN-LAST:event_cmbTipoActionPerformed

    private void cmbTipoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cmbTipoPropertyChange

    }//GEN-LAST:event_cmbTipoPropertyChange

    private void ListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListarActionPerformed
        int row=tblLista.getSelectedRow();
        String sku=tblLista.getValueAt(row, 0).toString();
        String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[12];

                sql="SELECT MATERIA_MODELO, MATERIA_MARCA, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_MEDIDA_LARGO, MATERIA_MEDIDA_ANCHO, MATERIA_MEDIDA_ESPESOR, MATERIA_COSTO,MATERIA_PRECIO,MATERIA_NOTAS, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO"
                + " FROM peleteriacid.materiales WHERE MATERIA_SKU = '"+sku+"';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=Integer.toString(rs.getInt(3));
                        datos[3]=rs.getString(4);
                        datos[4]=Float.toString(rs.getFloat(5));
                        datos[5]=Float.toString(rs.getFloat(6));
                        datos[6]=Float.toString(rs.getFloat(7));
                        datos[7]=Double.toString(rs.getDouble(8));
                        datos[8]=Double.toString(rs.getDouble(9));
                        datos[9]=rs.getString(10);
                        datos[10]=Double.toString(rs.getDouble(11));
                        datos[11]=Double.toString(rs.getDouble(12));
                    }
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                txtModelo.setText(datos[0]);
                txtMarca.setText(datos[1]);
                txtCantidad.setText(datos[2]);
                txtColor.setText(datos[3]);
                txtMedidaLargo.setText(datos[4]);
                txtMedidaAncho.setText(datos[5]);
                txtMedidaEspesor.setText(datos[6]);
                txtCosto.setText(datos[7]);
                txtPrecio.setText(datos[8]);
                txtArea.setText(datos[9]);
                txtPrecio1.setText(datos[10]);
                txtPrecio2.setText(datos[11]);
                txtModelo.setEnabled(true);
                txtMarca.setEnabled(true);
                txtCantidad.setEnabled(true);
                txtColor.setEnabled(true);
                txtMedidaLargo.setEnabled(true);
                txtMedidaAncho.setEnabled(true);
                txtMedidaEspesor.setEnabled(true);
                txtCosto.setEnabled(true);
                txtPrecio.setEnabled(true);
                txtArea.setEnabled(true);
                txtPrecio1.setEnabled(true);
                txtPrecio2.setEnabled(true);
    }//GEN-LAST:event_ListarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        int row=tblLista.getSelectedRow();
        if(row >=0){
        String sku=tblLista.getValueAt(row, 0).toString();
        System.out.println(sku);
        String Notas="",Modelo="", Marca="";
        float MedidaLargo=0, MedidaAncho=0, MedidaEspesor=0;
        double Precio=0.0, PrecioBoleros=0.0, PrecioMayoreo=0.0, Costo=0.0;
        String Color="";
        int Cantidad=0;
        String sql;
                ResultSet rs;
                Statement st;

                sql="SELECT MATERIA_MODELO, MATERIA_MARCA, MATERIA_CANTIDAD, MATERIA_COLOR, MATERIA_MEDIDA_LARGO,MATERIA_MEDIDA_ANCHO,MATERIA_MEDIDA_ESPESOR, MATERIA_COSTO,MATERIA_PRECIO,MATERIA_NOTAS, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO"
                + " FROM peleteriacid.materiales WHERE MATERIA_SKU = '"+sku+"';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        Modelo=rs.getString(1);
                        Marca=rs.getString(2);
                        Cantidad=rs.getInt(3);
                        Color=rs.getString(4);
                        MedidaLargo=rs.getFloat(5);
                        MedidaAncho=rs.getFloat(6);
                        MedidaEspesor=rs.getFloat(7);
                        Costo=rs.getDouble(8);
                        Precio=rs.getDouble(9);
                        Notas=rs.getString(10);
                        PrecioBoleros=rs.getDouble(11);
                        PrecioMayoreo=rs.getDouble(12);
                    }
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                if(!txtModelo.getText().equals(Modelo)){
                    Modelo=txtModelo.getText();
                }
                if(!txtMarca.getText().equals(Marca)){
                    Marca=txtMarca.getText();
                }
                if(!txtCantidad.getText().equals(String.valueOf(Cantidad))){
                    Cantidad=Integer.parseInt(txtCantidad.getText());
                }
                if(!txtColor.getText().equals(Color)){
                    Color=txtColor.getText();
                }
                if(!txtMedidaLargo.getText().equals(String.valueOf(MedidaLargo))){
                    MedidaLargo=Integer.parseInt(txtMedidaLargo.getText());
                }
                if(!txtMedidaAncho.getText().equals(String.valueOf(MedidaAncho))){
                    MedidaAncho=Integer.parseInt(txtMedidaAncho.getText());
                }
                if(!txtMedidaEspesor.getText().equals(String.valueOf(MedidaEspesor))){
                    MedidaEspesor=Integer.parseInt(txtMedidaEspesor.getText());
                }
                if(!txtCosto.getText().equals(String.valueOf(Costo))){
                    Costo=Double.parseDouble(txtCosto.getText());
                }
                if(!txtPrecio.getText().equals(String.valueOf(Precio))){
                    Precio=Double.parseDouble(txtPrecio.getText());
                }
                if(!txtArea.getText().equals(Notas)){
                    Notas=txtArea.getText();
                }
                if(!txtPrecio1.getText().equals(String.valueOf(PrecioBoleros))){
                    PrecioBoleros=Double.parseDouble(txtPrecio1.getText());
                }
                if(!txtPrecio2.getText().equals(String.valueOf(PrecioMayoreo))){
                    PrecioMayoreo=Double.parseDouble(txtPrecio2.getText());
                }
        int Option=JOptionPane.showOptionDialog(btnActualizar, 
                            "\n¿Es correcto?","Confirme el registro",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Si","No"},"Si");
      if(Option==0){
          try{                   
                    PreparedStatement pst1=cn.prepareStatement("UPDATE peleteriacid.materiales "
                    +"SET MATERIA_CANTIDAD = "+ Cantidad+", MATERIA_MODELO = '"+Modelo+"', MATERIA_MARCA = '"+Marca+"', MATERIA_COLOR = '"+Color+"', MATERIA_MEDIDA_LARGO = "+MedidaLargo
                    +", MATERIA_MEDIDA_ANCHO = "+MedidaAncho+", MATERIA_MEDIDA_ESPESOR = "+MedidaEspesor+", MATERIA_COSTO = "+Costo+", MATERIA_PRECIO = "+Precio+", MATERIA_NOTAS = '"+Notas
                    +"', MATERIA_PRECIO_BOLEROS = "+PrecioBoleros+", MATERIA_PRECIO_MAYOREO = "+PrecioMayoreo+" WHERE MATERIA_SKU = '"+sku
                    +"';");
                    System.out.println(pst1);
                    pst1.executeUpdate();
                }catch(SQLException ex){
                    Logger.getLogger(RegistrarVenta.class.getName()).log(Level.SEVERE, null, ex);

                }
        JOptionPane.showMessageDialog(null, "La actualización fue hecha con éxito","Éxito",JOptionPane.OK_OPTION);
        LimpiarCampos();
        txtMedidaEspesor.setEnabled(false);
        txtMedidaLargo.setEnabled(false);
        txtMedidaAncho.setEnabled(false);
        txtModelo.setEnabled(false);
        txtColor.setEnabled(false);
        txtCantidad.setEnabled(false);
        txtPrecio.setEnabled(false);
        txtCosto.setEnabled(false);
        txtArea.setEnabled(false);
        txtMarca.setEnabled(false);
        txtPrecio1.setEnabled(false);
        txtPrecio2.setEnabled(false);
      }else{
          
      }
        }else{
            JOptionPane.showMessageDialog(null, "No seleccionó ninguna fila");
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void txtPrecio1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecio1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecio1KeyReleased

    private void txtPrecio2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecio2KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecio2KeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditarInventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditarInventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditarInventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditarInventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditarInventario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Listar;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JComboBox<String> cmbTipo;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbModelo;
    private javax.swing.JLabel lblAncho;
    private javax.swing.JLabel lblAnchocm;
    private javax.swing.JLabel lblColor;
    private javax.swing.JLabel lblEspesor;
    private javax.swing.JLabel lblEspesorcm;
    private javax.swing.JLabel lblLargo;
    private javax.swing.JLabel lblLargocm;
    private javax.swing.JLabel lblLitros;
    private javax.swing.JLabel lblMarca;
    private javax.swing.JLabel lblMedida;
    private javax.swing.JLabel lblUnidades;
    private javax.swing.JTable tblLista;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtColor;
    private javax.swing.JTextField txtCosto;
    private javax.swing.JTextField txtMarca;
    private javax.swing.JTextField txtMedidaAncho;
    private javax.swing.JTextField txtMedidaEspesor;
    private javax.swing.JTextField txtMedidaLargo;
    private javax.swing.JTextField txtModelo;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtPrecio1;
    private javax.swing.JTextField txtPrecio2;
    // End of variables declaration//GEN-END:variables
Conectar cc=new Conectar();
Connection cn=cc.conexion();
}
