/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Paquete;

import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.Format;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gloria
 */
public class AgregarMaterial extends javax.swing.JFrame {

    /**
     * Creates new form AgregarMaterial
     */
    
    public AgregarMaterial() {
        initComponents();
        LlenaCombo();
        DefaultTableModel modelito = new DefaultTableModel();
        modelito.addColumn("SKU");
        modelito.addColumn("Modelo");
        modelito.addColumn("Color");
        modelito.addColumn("Cantidad");
        modelito.addColumn("Existencias");
        modelito.addColumn("Costo total");
        tblPedidos.setModel(modelito);
        jPanel1.setVisible(false);
        tblContenido.setVisible(false);
        jScrollPane1.setVisible(false);
        tblContenido2.setVisible(false);
        jScrollPane6.setVisible(false);
        this.getContentPane().setBackground(Color.WHITE);
        txtMedidaEspesor.setEnabled(false);
        txtMedidaLargo.setEnabled(false);
        txtMedidaAncho.setEnabled(false);
        txtModelo.setEnabled(false);
        txtColor.setEnabled(false);
        txtCantidad.setEnabled(false);
        txtPrecio.setEnabled(false);
        txtCosto.setEnabled(false);
        txtMarca.setEnabled(false);
        txtArea.setEnabled(false);
        cmbMetodo.setEnabled(false);
        datePago.setEnabled(false);
        txtMargen.setEnabled(false);
        txtPrecio1.setEnabled(false);
        txtPrecio2.setEnabled(false);
        this.jPanel2.setBackground(Color.WHITE);
    }
    
    private void LlenaCombo(){
        String sql="SELECT * FROM peleteriacid.proveedores WHERE PROV_TIPO = 'Productos';";
        ResultSet rs;
        Statement st;
        try{
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                
                String ClaveInst=rs.getString(2);
                cmbProveedores.addItem(ClaveInst);
            }
        }catch(SQLException ex){
            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    public void Consulta(){
        DefaultTableModel modelito = new DefaultTableModel();
                modelito.addColumn("SKU");
                modelito.addColumn("Modelo");
                modelito.addColumn("Color");
                modelito.addColumn("Adquirido");
                modelito.addColumn("Existencia");
                modelito.addColumn("Costo");
                
        tblPedidos.setModel(modelito);
    }
    public void LimpiarCampos(){
        txtMedidaEspesor.setText("");
        txtModelo.setText("");
        txtCantidad.setText("");
        txtPrecio.setText("");
        txtMedidaLargo.setText("");
        txtMedidaAncho.setText("");
        txtColor.setText("");
        txtCosto.setText("");
        txtCosto1.setText("");
        txtArea.setText("");
        txtMarca.setText("");
        txtMargen.setText("");
        txtPrecio1.setText("");
        txtPrecio2.setText("");
        
    }
    public void LimpiarCamposFactura(){
        txtFactura.setText("");
        chkIVA.setSelected(false);
        cmbUbicacion.setSelectedIndex(0);
        cmbMetodo.setSelectedIndex(0);
        chkPagado.setSelected(false);
        cmbProveedores.setSelectedIndex(0);
        cmbProveedores.setEnabled(true);
        txtSubtotal.setText("");
        txtTotal.setText("");
        txtDescuento.setText("");
        txtNotas.setText("");
        datePago.setCalendar(null);
        datePedido.setCalendar(null);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        Seleccional = new javax.swing.JMenuItem();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblContenido = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblContenido2 = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtFactura = new javax.swing.JTextField();
        cmbTipo1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        datePago = new com.toedter.calendar.JDateChooser();
        datePedido = new com.toedter.calendar.JDateChooser();
        cmbMetodo = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtSubtotal = new javax.swing.JTextField();
        txtDescuento = new javax.swing.JTextField();
        txtTotal = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        txtNotas = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        lblEspesor = new javax.swing.JLabel();
        txtMedidaEspesor = new javax.swing.JTextField();
        lbModelo = new javax.swing.JLabel();
        lblAnchocm = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblLargocm = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblEspesorcm = new javax.swing.JLabel();
        lblColor = new javax.swing.JLabel();
        lblAncho = new javax.swing.JLabel();
        lblMedida = new javax.swing.JLabel();
        lblUnidades = new javax.swing.JLabel();
        txtModelo = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        txtPrecio = new javax.swing.JTextField();
        txtCosto = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtColor = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtMedidaAncho = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        lblLargo = new javax.swing.JLabel();
        lblMarca = new javax.swing.JLabel();
        txtMedidaLargo = new javax.swing.JTextField();
        txtMarca = new javax.swing.JTextField();
        lblLitros = new javax.swing.JLabel();
        btnRegistrar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        cmbTipo = new javax.swing.JComboBox<>();
        txtCosto1 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        txtMargen = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        txtPrecio1 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        txtPrecio2 = new javax.swing.JTextField();
        cmbProveedores = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        chkIVA = new javax.swing.JCheckBox();
        jLabel19 = new javax.swing.JLabel();
        cmbUbicacion = new javax.swing.JComboBox<>();
        chkPagado = new javax.swing.JCheckBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblLista = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblPedidos = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();

        Seleccional.setText("Seleccionar");
        Seleccional.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeleccionalActionPerformed(evt);
            }
        });
        jPopupMenu1.add(Seleccional);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setSize(new java.awt.Dimension(1300, 800));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 102, 204));
        jLabel9.setText("REGISTRO DE FACTURAS");

        tblContenido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblContenido.setEnabled(false);
        jScrollPane1.setViewportView(tblContenido);

        tblContenido2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblContenido2.setEnabled(false);
        jScrollPane6.setViewportView(tblContenido2);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la factura"));

        jLabel1.setText("Ubicacion:");

        jLabel4.setText("No. Factura:");

        cmbTipo1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tipo de Material", "Agujas", "Agujetas", "Aseo", "Brochas y cepillos", "Carretes", "Cerco", "Cierres", "Clavos y tachuelas", "Correas y látigos", "Cámara de avión", "Fibras", "Grasas y ceras", "Hebillas y adornos", "Herramienta", "Hilos", "Lijas", "Pegamento", "Piel", "Pinturas", "Plantillas y taloneras", "Remaches", "Suelas", "Tacones", "Tapas y Firmes", "Tapetes", "Tintas" }));
        cmbTipo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTipo1ActionPerformed(evt);
            }
        });
        cmbTipo1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                cmbTipo1PropertyChange(evt);
            }
        });

        jButton1.setText("Registar factura");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Registrar nuevo material");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        cmbMetodo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Método de pago>", "Efectivo", "Tarjeta de crédito", "Transferencia Electrónica", "Depósito Bancario" }));

        jLabel7.setText("Fecha de pedido:");

        jLabel8.setText("Fecha de pago:");

        txtSubtotal.setEnabled(false);
        txtSubtotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSubtotalActionPerformed(evt);
            }
        });
        txtSubtotal.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtSubtotalPropertyChange(evt);
            }
        });

        txtDescuento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescuentoActionPerformed(evt);
            }
        });
        txtDescuento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDescuentoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDescuentoKeyReleased(evt);
            }
        });

        txtTotal.setEnabled(false);

        jLabel11.setText("Subtotal:");

        jLabel12.setText("Descuento:");

        jLabel13.setText("Total:");

        jLabel14.setText("Notas: ");

        txtNotas.setColumns(20);
        txtNotas.setRows(5);
        jScrollPane7.setViewportView(txtNotas);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Registro de material nuevo"));

        lblEspesor.setText("Espesor:");

        lbModelo.setText("Modelo:");

        lblAnchocm.setText("cm");

        jLabel2.setText("Cantidad existente:");

        lblLargocm.setText("cm");

        jLabel3.setText("Costo Unitario:");

        lblEspesorcm.setText("cm");

        lblColor.setText("Color:");

        lblAncho.setText("Ancho:");

        lblMedida.setText("Medidas:");

        lblUnidades.setText("Unidades");

        jLabel15.setText("Precio Unitario de venta al publico general:");

        txtCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCantidadKeyReleased(evt);
            }
        });

        txtPrecio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPrecioKeyReleased(evt);
            }
        });

        txtCosto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCostoActionPerformed(evt);
            }
        });
        txtCosto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCostoKeyReleased(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel16.setText("$");

        jLabel5.setText("Notas:");

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane2.setViewportView(txtArea);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("$");

        lblLargo.setText("Largo:");

        lblMarca.setText("Marca:");

        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar Campos");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        cmbTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tipo de Material", "Agujas", "Agujetas", "Aseo", "Brochas y cepillos", "Carretes", "Cerco", "Cierres", "Clavos y tachuelas", "Correas y látigos", "Cámara de avión", "Fibras", "Grasas y ceras", "Hebillas y adornos", "Herramienta", "Hilos", "Lijas", "Pegamento", "Piel", "Pinturas", "Plantillas y taloneras", "Remaches", "Suelas", "Tacones", "Tapas y Firmes", "Tapetes", "Tintas" }));
        cmbTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTipoActionPerformed(evt);
            }
        });
        cmbTipo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                cmbTipoPropertyChange(evt);
            }
        });

        txtCosto1.setEnabled(false);

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel17.setText("$");

        jLabel18.setText("Costo Total:");

        jLabel20.setText("Margen de ganancia:");

        txtMargen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMargenActionPerformed(evt);
            }
        });
        txtMargen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMargenKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMargenKeyTyped(evt);
            }
        });

        jLabel21.setText("Precio Unitario de venta a boleros:");

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel22.setText("$");

        txtPrecio1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPrecio1KeyReleased(evt);
            }
        });

        jLabel23.setText("Precio Unitario de venta por mayoria:");

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel24.setText("$");

        txtPrecio2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPrecio2KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbModelo)
                            .addComponent(lblMarca)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblColor)
                                .addGap(3, 3, 3))
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtModelo, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                                    .addComponent(txtMarca))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblLitros, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20)
                                    .addComponent(txtMargen, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtColor, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(txtCosto, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel18)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel17)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtCosto1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cmbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(204, 204, 204))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel21)
                                        .addGap(37, 37, 37)
                                        .addComponent(jLabel22)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtPrecio1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel15)
                                            .addGap(37, 37, 37)
                                            .addComponent(jLabel16)
                                            .addGap(18, 18, 18)
                                            .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addGap(18, 18, 18)
                                            .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lblUnidades)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel23)
                                        .addGap(37, 37, 37)
                                        .addComponent(jLabel24)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtPrecio2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(lblAncho)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtMedidaAncho, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAnchocm)
                        .addGap(41, 41, 41)
                        .addComponent(lblLargo)
                        .addGap(2, 2, 2)
                        .addComponent(txtMedidaLargo, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblLargocm)
                        .addGap(32, 32, 32)
                        .addComponent(lblEspesor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMedidaEspesor, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblEspesorcm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLimpiar)
                        .addGap(27, 27, 27)
                        .addComponent(btnRegistrar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblMedida)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cmbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2)
                                            .addComponent(lblUnidades))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel16)
                                        .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel15)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel22)
                                    .addComponent(txtPrecio1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel21))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel24)
                                    .addComponent(txtPrecio2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel23)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblLitros, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lbModelo)
                                        .addComponent(txtModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMarca)
                            .addComponent(txtMargen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblColor)
                                    .addComponent(txtColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(txtCosto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel17)
                                    .addComponent(txtCosto1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel18))))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(lblMedida)
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMedidaAncho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAnchocm)
                            .addComponent(txtMedidaLargo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLargocm)
                            .addComponent(txtMedidaEspesor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLargo)
                            .addComponent(lblEspesor)
                            .addComponent(lblAncho)
                            .addComponent(lblEspesorcm))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnRegistrar)
                        .addComponent(btnLimpiar)))
                .addContainerGap())
        );

        cmbProveedores.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Seleccione un Proveedor>" }));
        cmbProveedores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbProveedoresActionPerformed(evt);
            }
        });
        cmbProveedores.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                cmbProveedoresPropertyChange(evt);
            }
        });

        jLabel10.setText("Proveedor:");

        chkIVA.setText("IVA");
        chkIVA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkIVAActionPerformed(evt);
            }
        });

        jLabel19.setText("Elementos a facturar:");

        cmbUbicacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Seleccione una Ubicacion>", "Ciudad de México", "Estado de México", "Guadalajara", "León", "Michoacán" }));

        chkPagado.setText("Pagado");
        chkPagado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPagadoActionPerformed(evt);
            }
        });

        tblLista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblLista.setComponentPopupMenu(jPopupMenu1);
        jScrollPane5.setViewportView(tblLista);

        jScrollPane4.setViewportView(jScrollPane5);

        tblPedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tblPedidos);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator1)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbTipo1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel19)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel4))
                                        .addGap(18, 18, 18))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(chkPagado, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbMetodo, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbUbicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(44, 44, 44)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel7))
                                        .addGap(49, 49, 49)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(datePedido, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(datePago, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel11)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtSubtotal, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(28, 28, 28)
                                        .addComponent(jLabel12)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(36, 36, 36)
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(46, 46, 46)
                                        .addComponent(cmbProveedores, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(65, 65, 65)
                                        .addComponent(chkIVA)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel14)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(20, 20, 20))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(datePago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(txtSubtotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(txtDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)
                            .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel14))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(datePedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel7)
                                            .addComponent(cmbUbicacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4)
                                            .addComponent(txtFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(cmbMetodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(chkPagado)
                                            .addComponent(cmbProveedores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel10)
                                            .addComponent(chkIVA))))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton2)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(cmbTipo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
        );

        jScrollPane8.setViewportView(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(jLabel9))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 1241, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addGap(54, 54, 54))
            .addComponent(jScrollPane6)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 726, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void SeleccionalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeleccionalActionPerformed
        int fila = tblLista.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblLista.getModel();
        
        if(fila>=0){
            int j=0;
            DefaultTableModel modelito = (DefaultTableModel) tblPedidos.getModel();
            int existencia=Integer.parseInt(tblLista.getValueAt(fila, 3).toString());
            String SKU=tblLista.getValueAt(fila, 0).toString();
            
            String Color="";
            if(cmbTipo.getSelectedItem().equals("Pegamento")||cmbTipo.getSelectedItem().equals("Grasas y ceras")){
            Color=tblLista.getValueAt(fila, 2).toString();
            }
            String Modelo=tblLista.getValueAt(fila, 1).toString();
            double Costo=Double.parseDouble(tblLista.getValueAt(fila, 4).toString());
            int canti=Integer.parseInt(JOptionPane.showInputDialog(null, "Escoja la cantidad a añadir del producto", "Cantidad", 
            JOptionPane.WARNING_MESSAGE));
                String[] datos=new String[6];
                        
                datos[0]=SKU;
                datos[1]=Modelo;
                datos[2]=Color;
                datos[3]=String.valueOf(canti);
                datos[4]=String.valueOf(canti+existencia);
                datos[5]=String.valueOf(Costo*canti);
                modelito.addRow(datos);
            int rows=modelito.getRowCount(), i=0;
            Double subTotal=0.0;
            double Total=0.0;
            while(i<rows){
                subTotal+=Double.parseDouble(tblPedidos.getValueAt(i, 5).toString());
                i++;
            }
            txtSubtotal.setText(String.valueOf(subTotal));
            boolean[] field=new boolean[1];
            double Descuento;
            field[0]=txtDescuento.getText().isEmpty();
            if(field[0]){
                if(chkIVA.isSelected()){
                    subTotal+=(subTotal*0.16);
                   txtTotal.setText(String.valueOf(subTotal)); 
                }else
                txtTotal.setText(String.valueOf(subTotal)); 
            }else{
                Descuento=Double.parseDouble(txtDescuento.getText().toString());
                Total=subTotal-Descuento;
                if(chkIVA.isSelected()){
                    Total+=(Total*0.16);
                    txtTotal.setText(String.valueOf(Total));
                }else{
                txtTotal.setText(String.valueOf(Total));
                }
            }
            j++;
        }else{
            JOptionPane.showMessageDialog(null, "No seleccionó ninguna fila");
        }
    }//GEN-LAST:event_SeleccionalActionPerformed

    private void chkPagadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPagadoActionPerformed
        cmbMetodo.setEnabled(true);
        datePago.setEnabled(true);
        if(!chkPagado.isSelected()){
            cmbMetodo.setEnabled(false);
            datePago.setEnabled(false);
        }else{

        }
    }//GEN-LAST:event_chkPagadoActionPerformed

    private void chkIVAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkIVAActionPerformed
        double Subtotal= Double.parseDouble(txtSubtotal.getText());

        double Descuento= 0.0;
        boolean[] field=new boolean[1];
        field[0]=txtDescuento.getText().isEmpty();
        if(!field[0]){
            Descuento=Double.parseDouble(txtDescuento.getText());
        }

        double Total = 0.0;
        if(chkIVA.isSelected()==true){
            Total=(Subtotal-Descuento)*1.16;

        }else{
            Total=Subtotal-Descuento;
        }
        txtTotal.setText(String.format("%.2f",(Total)));
    }//GEN-LAST:event_chkIVAActionPerformed

    private void cmbProveedoresPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cmbProveedoresPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbProveedoresPropertyChange

    private void cmbProveedoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbProveedoresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbProveedoresActionPerformed

    private void cmbTipoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cmbTipoPropertyChange

    }//GEN-LAST:event_cmbTipoPropertyChange

    private void cmbTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTipoActionPerformed
        LimpiarCampos();
        lblColor.setVisible(true);
        txtColor.setVisible(true);
        txtMarca.setEnabled(true);
        txtArea.setEnabled(true);
        lblUnidades.setText("Unidades");
        tblContenido.setVisible(false);
        lbModelo.setVisible(true);
        txtModelo.setVisible(true);
        lbModelo.setText("Modelo:");
        lblLitros.setText("");
        txtMedidaEspesor.setVisible(true);
        lblEspesor.setVisible(true);
        lblEspesorcm.setVisible(true);
        txtMedidaAncho.setVisible(true);
        lblAncho.setVisible(true);
        lblLargo.setText("Largo:");
        lblAnchocm.setVisible(true);
        txtMedidaLargo.setVisible(true);
        lblLargo.setVisible(true);
        lblLargocm.setVisible(true);
        lblMarca.setVisible(true);
        txtMarca.setVisible(true);
        lblMedida.setVisible(true);

        txtMedidaEspesor.setEnabled(true);
        txtMedidaLargo.setEnabled(true);
        txtMedidaAncho.setEnabled(true);
        txtModelo.setEnabled(true);
        txtColor.setEnabled(true);
        txtCantidad.setEnabled(true);
        txtPrecio.setEnabled(true);
        txtCosto.setEnabled(true);
        txtMargen.setEnabled(true);
        txtPrecio1.setEnabled(true);
        txtPrecio2.setEnabled(true);
        switch (cmbTipo.getSelectedIndex()){
            case 1:{
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                lblMarca.setVisible(false);
                txtMarca.setVisible(false);
                lblColor.setVisible(false);
                txtColor.setVisible(false);
                break;
            }
            case 2:{
                lblUnidades.setText("Pares");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                break;
            }
            case 13:{
                txtMedidaEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                lblEspesor.setVisible(false);
                break;
            }
            case 19:{
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lblMedida.setVisible(false);
                lbModelo.setText("Contenido:");
                lblLitros.setText("Litros");
                break;
            }
            case 25:{
                lbModelo.setText("Tipo:");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lblMedida.setVisible(false);
                break;
            }
            case 8:{
                lblUnidades.setText("Kilos");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                break;
            }
            case 23:{
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                break;
            }
            case 9:{
                lblMarca.setVisible(false);
                txtMarca.setVisible(false);
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                break;
            }
            case 21:{
                lblMarca.setVisible(false);
                txtMarca.setVisible(false);
                txtColor.setVisible(false);
                lblColor.setVisible(false);
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                break;
            }
            case 22:{
                lblUnidades.setText("Pares");
                lbModelo.setText("Tipo:");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblLargo.setText("Numero:");
                lblAnchocm.setVisible(false);
                break;
            }
            case 24:{
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                break;
            }
            case 12:{
                lbModelo.setText("Tipo:");
                lblColor.setVisible(false);
                txtColor.setVisible(false);
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lblMedida.setVisible(false);
                lbModelo.setText("Contenido:");
                lblLitros.setText("Litros");
                break;
            }
            case 26:{
                lbModelo.setText("Tipo:");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lblMedida.setVisible(false);
                lbModelo.setText("Contenido:");
                lblLitros.setText("Litros");
                break;
            }
            case 20:{
                lbModelo.setText("Tipo:");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                break;
            }
            case 15:{
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                break;
            }
            case 18:{
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lblMedida.setVisible(false);
                lblMarca.setVisible(false);
                txtMarca.setVisible(false);
                break;
            }
            case 10:{
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lblMedida.setVisible(false);
                lblMarca.setVisible(false);
                txtMarca.setVisible(false);
                txtModelo.setVisible(false);
                lbModelo.setVisible(false);
                txtColor.setVisible(false);
                lblColor.setVisible(false);
                break;
            }
            case 17:{
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lblMedida.setVisible(false);
                lbModelo.setText("Contenido:");
                txtColor.setVisible(false);
                lblColor.setVisible(false);
                lblLitros.setText("Litros");
                break;
            }
            case 7:{
                lbModelo.setText("Tipo:");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                lblMarca.setVisible(false);
                txtMarca.setVisible(false);

                break;
            }
            case 4:{
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                break;
            }
            case 11:{
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lbModelo.setText("Tipo:");
                lblMedida.setVisible(false);
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                lblMarca.setVisible(false);
                txtMarca.setVisible(false);
                break;
            }
            case 14:{
                lblMedida.setVisible(false);
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lbModelo.setText("Tipo:");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                lblMarca.setVisible(false);
                txtMarca.setVisible(false);
                break;
            }
            case 6:{
                lblMedida.setVisible(false);
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lbModelo.setText("Tipo:");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                lblMarca.setVisible(false);
                txtMarca.setVisible(false);
                break;
            }
            case 16:{
                lbModelo.setText("Tipo:");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                break;
            }
            case 5:{
                lbModelo.setText("Tipo:");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);

                break;
            }
            case 3:{
                lblMedida.setVisible(false);
                txtMedidaLargo.setVisible(false);
                lblLargo.setVisible(false);
                lblLargocm.setVisible(false);
                lbModelo.setText("Tipo:");
                txtMedidaEspesor.setVisible(false);
                lblEspesor.setVisible(false);
                lblEspesorcm.setVisible(false);
                txtMedidaAncho.setVisible(false);
                lblAncho.setVisible(false);
                lblAnchocm.setVisible(false);
                break;
            }
            default:{
                txtMedidaEspesor.setEnabled(false);
                txtMedidaLargo.setEnabled(false);
                txtMedidaAncho.setEnabled(false);
                txtModelo.setEnabled(false);
                txtColor.setEnabled(false);
                txtCantidad.setEnabled(false);
                txtPrecio.setEnabled(false);
                txtCosto.setEnabled(false);
                txtArea.setEnabled(false);
                txtMarca.setEnabled(false);
                txtMargen.setEnabled(false);
                txtPrecio1.setEnabled(false);
                txtPrecio2.setEnabled(false);
                break;
            }
        }
    }//GEN-LAST:event_cmbTipoActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        LimpiarCampos();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        if(cmbProveedores.getSelectedIndex()!=0){
            DefaultTableModel modelito = (DefaultTableModel) tblPedidos.getModel();
            int Tipo=cmbTipo.getSelectedIndex(), Cantidad=Integer.parseInt(txtCantidad.getText());
            boolean[] field = new boolean[6];
            field[0]=txtMedidaLargo.getText().isEmpty();
            field[1]=txtMedidaAncho.getText().isEmpty();
            field[2]=txtMedidaEspesor.getText().isEmpty();
            field[3]=txtArea.getText().isEmpty();
            field[4]=txtModelo.getText().isEmpty();
            field[5]=txtMarca.getText().isEmpty();
            String Notas="",Modelo="", Marca="";
            float MedidaLargo=0, MedidaAncho=0, MedidaEspesor=0;
            if(!field[0]){
                MedidaLargo=Float.parseFloat(txtMedidaLargo.getText());
            }
            if(!field[1]){
                MedidaAncho=Float.parseFloat(txtMedidaAncho.getText());
            }
            if(!field[2]){
                MedidaEspesor=Float.parseFloat(txtMedidaEspesor.getText());
            }
            if(!field[3]){
                Notas=txtArea.getText();
            }
            if(!field[4]){
                Modelo=txtModelo.getText();
            }
            if(!field[5]){
                Marca=txtMarca.getText();
            }
            double Precio=Double.parseDouble(txtPrecio.getText()), Costo=Double.parseDouble(txtCosto.getText());
            double PrecioBoleros=Double.parseDouble(txtPrecio1.getText()), PrecioMayoreo=Double.parseDouble(txtPrecio2.getText());
            String Color=txtColor.getText();
            int Option=JOptionPane.showOptionDialog(btnRegistrar, "Tipo: "+cmbTipo.getSelectedItem()
                + "\nModelo: "+Modelo
                +"\nColor: "+Color
                +"\nMedida (Ancho):"+MedidaAncho
                +"\nMedida (Largo):"+MedidaLargo
                +"\nMedida (Espesor):"+MedidaEspesor
                +"\nPrecio general:"+Precio
                +"\nPrecio boleros:"+PrecioBoleros
                +"\nPrecio mayoreo:"+PrecioMayoreo
                +"\nCosto:"+Costo
                +"\nCantidad:"+Cantidad
                + "\n¿Es correcto?","Confirme el registro",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Si","No"},"Si");

            if(Option==0){

                switch (Tipo){
                    case 1:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_MEDIDA_LARGO, MATERIA_MEDIDA_ANCHO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setFloat(3, MedidaLargo);
                            pst.setFloat(4, MedidaAncho);
                            pst.setString(5, Color);
                            pst.setInt(6, Cantidad);
                            pst.setDouble(7, Precio);
                            pst.setDouble(8, Costo);
                            pst.setString(9, Notas);
                            pst.setDouble(10, PrecioBoleros);
                            pst.setDouble(11, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 2:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_MEDIDA_LARGO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setFloat(3, MedidaLargo);
                            pst.setString(4, Color);
                            pst.setInt(5, Cantidad);
                            pst.setDouble(6, Precio);
                            pst.setDouble(7, Costo);
                            pst.setString(8, Notas);
                            pst.setDouble(9, PrecioBoleros);
                            pst.setDouble(10, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 13:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_MEDIDA_LARGO, MATERIA_MEDIDA_ANCHO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setFloat(3, MedidaLargo);
                            pst.setFloat(4, MedidaAncho);
                            pst.setString(5, Color);
                            pst.setInt(6, Cantidad);
                            pst.setDouble(7, Precio);
                            pst.setDouble(8, Costo);
                            pst.setString(9, Notas);
                            pst.setDouble(10, PrecioBoleros);
                            pst.setDouble(11, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();

                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 19:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_MARCA, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setString(3, Color);
                            pst.setInt(4, Cantidad);
                            pst.setDouble(5, Precio);
                            pst.setDouble(6, Costo);
                            pst.setString(7, Notas);
                            pst.setString(8, Marca);
                            pst.setDouble(9, PrecioBoleros);
                            pst.setDouble(10, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 25:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setString(3, Color);
                            pst.setInt(4, Cantidad);
                            pst.setDouble(5, Precio);
                            pst.setDouble(6, Costo);
                            pst.setString(7, Notas);
                            pst.setDouble(8, PrecioBoleros);
                            pst.setDouble(9, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 8:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_MEDIDA_LARGO, MATERIA_MEDIDA_ANCHO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setString(3, Color);
                            pst.setInt(4, Cantidad);
                            pst.setDouble(5, Precio);
                            pst.setFloat(6, MedidaLargo);
                            pst.setFloat(7, MedidaAncho);
                            pst.setDouble(8, Costo);
                            pst.setString(9, Notas);
                            pst.setDouble(10, PrecioBoleros);
                            pst.setDouble(11, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 23:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_MEDIDA_LARGO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_MARCA, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setString(3, Color);
                            pst.setInt(4, Cantidad);
                            pst.setDouble(5, Precio);
                            pst.setFloat(6, MedidaLargo);
                            pst.setDouble(7, Costo);
                            pst.setString(8, Notas);
                            pst.setString(9, Marca);
                            pst.setDouble(10, PrecioBoleros);
                            pst.setDouble(11, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 9:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_MEDIDA_LARGO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setString(3, Color);
                            pst.setInt(4, Cantidad);
                            pst.setDouble(5, Precio);
                            pst.setFloat(6, MedidaLargo);
                            pst.setDouble(7, Costo);
                            pst.setString(8, Notas);
                            pst.setDouble(9, PrecioBoleros);
                            pst.setDouble(10, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 21:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_MEDIDA_LARGO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setInt(3, Cantidad);
                            pst.setDouble(4, Precio);
                            pst.setFloat(5, MedidaLargo);
                            pst.setDouble(6, Costo);
                            pst.setString(7, Notas);
                            pst.setDouble(8, PrecioBoleros);
                            pst.setDouble(9, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 22:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_MEDIDA_LARGO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_MARCA, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setString(3, Color);
                            pst.setInt(4, Cantidad);
                            pst.setDouble(5, Precio);
                            pst.setFloat(6, MedidaLargo);
                            pst.setDouble(7, Costo);
                            pst.setString(8, Notas);
                            pst.setString(9, Marca);
                            pst.setDouble(10, PrecioBoleros);
                            pst.setDouble(11, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}

                    case 24:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_MEDIDA_LARGO, MATERIA_MEDIDA_ANCHO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_MARCA, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setString(3, Color);
                            pst.setInt(4, Cantidad);
                            pst.setDouble(5, Precio);
                            pst.setFloat(6, MedidaLargo);
                            pst.setFloat(7, MedidaAncho);
                            pst.setDouble(8, Costo);
                            pst.setString(9, Notas);
                            pst.setString(10, Marca);
                            pst.setDouble(11, PrecioBoleros);
                            pst.setDouble(12, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 12:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_MARCA, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setInt(3, Cantidad);
                            pst.setDouble(4, Precio);
                            pst.setDouble(5, Costo);
                            pst.setString(6, Notas);
                            pst.setString(7, Marca);
                            pst.setDouble(8, PrecioBoleros);
                            pst.setDouble(9, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 26:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_MARCA, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setString(3, Color);
                            pst.setInt(4, Cantidad);
                            pst.setDouble(5, Precio);
                            pst.setDouble(6, Costo);
                            pst.setString(7, Notas);
                            pst.setString(8, Marca);
                            pst.setDouble(9, PrecioBoleros);
                            pst.setDouble(10, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 20:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_MEDIDA_LARGO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_MARCA, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setString(3, Color);
                            pst.setInt(4, Cantidad);
                            pst.setDouble(5, Precio);
                            pst.setFloat(6, MedidaLargo);
                            pst.setDouble(7, Costo);
                            pst.setString(8, Notas);
                            pst.setString(9, Marca);
                            pst.setDouble(10, PrecioBoleros);
                            pst.setDouble(11, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 15:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_MEDIDA_LARGO,  MATERIA_COSTO, MATERIA_NOTAS, MATERIA_MARCA, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setString(3, Color);
                            pst.setInt(4, Cantidad);
                            pst.setDouble(5, Precio);
                            pst.setFloat(6, MedidaLargo);
                            pst.setDouble(7, Costo);
                            pst.setString(8, Notas);
                            pst.setString(9, Marca);
                            pst.setDouble(10, PrecioBoleros);
                            pst.setDouble(11, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 18:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setString(3, Color);
                            pst.setInt(4, Cantidad);
                            pst.setDouble(5, Precio);
                            pst.setDouble(6, Costo);
                            pst.setString(7, Notas);
                            pst.setDouble(8, PrecioBoleros);
                            pst.setDouble(9, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 10:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setInt(2, Cantidad);
                            pst.setDouble(3, Precio);
                            pst.setDouble(4, Costo);
                            pst.setString(5, Notas);
                            pst.setDouble(6, PrecioBoleros);
                            pst.setDouble(7, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 17:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_MARCA, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setInt(3, Cantidad);
                            pst.setDouble(4, Precio);
                            pst.setDouble(5, Costo);
                            pst.setString(6, Notas);
                            pst.setString(7, Marca);
                            pst.setDouble(8, PrecioBoleros);
                            pst.setDouble(9, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 7:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_MEDIDA_LARGO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setString(3, Color);
                            pst.setInt(4, Cantidad);
                            pst.setDouble(5, Precio);
                            pst.setFloat(6, MedidaLargo);
                            pst.setDouble(7, Costo);
                            pst.setString(8, Notas);
                            pst.setDouble(9, PrecioBoleros);
                            pst.setDouble(10, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 4:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_MEDIDA_LARGO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_MARCA, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setString(3, Color);
                            pst.setInt(4, Cantidad);
                            pst.setDouble(5, Precio);
                            pst.setFloat(6, MedidaLargo);
                            pst.setDouble(7, Costo);
                            pst.setString(8, Notas);
                            pst.setString(9, Marca);
                            pst.setDouble(10, PrecioBoleros);
                            pst.setDouble(11, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 11:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setString(3, Color);
                            pst.setInt(4, Cantidad);
                            pst.setDouble(5, Precio);
                            pst.setDouble(6, Costo);
                            pst.setString(7, Notas);
                            pst.setDouble(8, PrecioBoleros);
                            pst.setDouble(9, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 14:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setString(3, Color);
                            pst.setInt(4, Cantidad);
                            pst.setDouble(5, Precio);
                            pst.setDouble(6, Costo);
                            pst.setString(7, Notas);
                            pst.setDouble(8, PrecioBoleros);
                            pst.setDouble(9, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 6:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setString(3, Color);
                            pst.setInt(4, Cantidad);
                            pst.setDouble(5, Precio);
                            pst.setDouble(6, Costo);
                            pst.setString(7, Notas);
                            pst.setDouble(8, PrecioBoleros);
                            pst.setDouble(9, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 16:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_MEDIDA_LARGO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_MARCA, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setString(3, Color);
                            pst.setInt(4, Cantidad);
                            pst.setDouble(5, Precio);
                            pst.setFloat(6, MedidaLargo);
                            pst.setDouble(7, Costo);
                            pst.setString(8, Notas);
                            pst.setString(9, Marca);
                            pst.setDouble(10, PrecioBoleros);
                            pst.setDouble(11, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 5:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_MEDIDA_LARGO, MATERIA_MEDIDA_ANCHO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setString(3, Color);
                            pst.setInt(4, Cantidad);
                            pst.setDouble(5, Precio);
                            pst.setFloat(6, MedidaLargo);
                            pst.setFloat(7, MedidaAncho);
                            pst.setDouble(8, Costo);
                            pst.setString(9, Notas);
                            pst.setDouble(10, PrecioBoleros);
                            pst.setDouble(11, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}
                    case 3:{
                        try{
                            PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales(MATERIA_TIPO, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_COSTO, MATERIA_NOTAS, MATERIA_MARCA, MATERIA_PRECIO_BOLEROS, MATERIA_PRECIO_MAYOREO)"
                                +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                            pst.setString(1, cmbTipo.getSelectedItem().toString());
                            pst.setString(2, Modelo);
                            pst.setString(3, Color);
                            pst.setInt(4, Cantidad);
                            pst.setDouble(5, Precio);
                            pst.setDouble(6, Costo);
                            pst.setString(7, Notas);
                            pst.setString(8, Marca);
                            pst.setDouble(9, PrecioBoleros);
                            pst.setDouble(10, PrecioMayoreo);
                            System.out.println(pst);
                            pst.executeUpdate();
                        }catch(SQLException ex){
                            Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;}

                }
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("ID");
                modelo.addColumn("Tipo");
                modelo.addColumn("Modelo");
                modelo.addColumn("Medida (Ancho)");
                modelo.addColumn("Medida (Largo)");
                modelo.addColumn("Cantidad Existente");
                modelo.addColumn("Precio");
                modelo.addColumn("Color");
                tblContenido.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[10];
                sql="SELECT MATERIA_SKU,MATERIA_ID, MATERIA_TIPO, MATERIA_MODELO, MATERIA_MEDIDA_ANCHO,"
                + " MATERIA_MEDIDA_LARGO, MATERIA_MEDIDA_ESPESOR, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales ORDER BY MATERIA_ID DESC;";

                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);
                    System.out.println(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=Integer.toString(rs.getInt(2));
                        datos[2]=rs.getString(3);
                        datos[3]=rs.getString(4);
                        datos[4]=Float.toString(rs.getFloat(5));
                        datos[5]=Float.toString(rs.getFloat(6));
                        datos[6]=Float.toString(rs.getFloat(7));
                        datos[7]=Integer.toString(rs.getInt(8));
                        datos[8]=Double.toString(rs.getDouble(9));
                        datos[9]=rs.getString(10);

                        modelo.addRow(datos);
                    }

                    tblContenido.setModel(modelo);
                    rs.close();
                }catch(SQLException ex){
                    Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                }
                int relacion=Integer.parseInt(tblContenido.getValueAt(0, 1).toString());
                String Proveedor=cmbProveedores.getSelectedItem().toString();
                System.out.println(relacion);
                try {

                    String Prefijo="", SKU="", Ceros="";
                    if (relacion<10){
                        Ceros="000";
                    }else if(relacion<100){
                        Ceros="00";
                    }else if(relacion<1000){
                        Ceros="0";
                    }else

                    System.out.println(Ceros);
                    switch (cmbTipo.getSelectedIndex()){
                        case 1:{
                            Prefijo="AGU";
                            break;
                        }
                        case 2:{
                            Prefijo="AGJ";
                            break;
                        }
                        case 13:{
                            Prefijo="HEB";
                            break;
                        }
                        case 19:{
                            Prefijo="PIN";
                            break;
                        }
                        case 25:{
                            Prefijo="TAP";
                            //Tapetes y laminas
                            break;
                        }
                        case 8:{
                            Prefijo="CLA";
                            //Clavos y tachuelas
                            break;
                        }
                        case 23:{
                            Prefijo="TAC";
                            //Tacones
                            break;
                        }
                        case 9:{
                            Prefijo="COR";
                            //Correas y latigos
                            break;
                        }
                        case 21:{
                            Prefijo="REM";
                            //Remaches
                            break;
                        }
                        case 22:{
                            Prefijo="SUE";
                            //Suelas
                            break;
                        }
                        case 24:{
                            Prefijo="TPS";
                            //Tapas y firmes
                            break;
                        }
                        case 12:{
                            Prefijo="GRA";
                            //Grasas, ceras
                            break;
                        }
                        case 26:{
                            Prefijo="TIN";
                            //Tintas
                            break;
                        }
                        case 20:{
                            Prefijo="PLA";
                            //Plantillas y taloneras
                            break;
                        }
                        case 15:{
                            Prefijo="HIL";
                            //Hilos
                            break;
                        }
                        case 18:{
                            Prefijo="PIE";
                            //Piel
                            break;
                        }
                        case 10:{
                            Prefijo="AVI";
                            //Camara de avion
                            break;
                        }
                        case 17:{
                            Prefijo="PEG";
                            //Pegamento
                            break;
                        }
                        case 7:{
                            Prefijo="CIE";
                            //Cierres
                            break;
                        }
                        case 4:{
                            Prefijo="BRO";
                            //Brochas y cepillos
                            break;
                        }
                        case 11:{
                            Prefijo="FIB";
                            //Fibras
                            break;
                        }
                        case 14:{
                            Prefijo="HER";
                            //Eva y hulespuma, cuchillos
                            break;
                        }
                        case 6:{
                            Prefijo="CER";
                            //Cerco
                            break;
                        }
                        case 16:{
                            Prefijo="LIJ";
                            //Lijas
                            break;
                        }
                        case 5:{
                            Prefijo="CAR";
                            //Carretes
                            break;
                        }
                        case 3:{
                            Prefijo="ASE";
                            //Limpiadores, jabones y champu
                            break;
                        }
                    }

                    System.out.println(Prefijo);
                    SKU=Prefijo+Ceros+relacion;
                    System.out.println(SKU);

                    String[] datos1=new String[6];

                    datos1[0]=SKU;
                    datos1[1]=Modelo;
                    datos1[2]=Color;
                    datos1[3]=String.valueOf(Cantidad);
                    datos1[4]=String.valueOf(Cantidad);
                    datos1[5]=String.valueOf(Costo*Cantidad);
                    modelito.addRow(datos1);
                    tblPedidos.setModel(modelito);
                    PreparedStatement pst1=cn.prepareStatement("UPDATE peleteriacid.materiales "
                        + "SET MATERIA_SKU = '"+SKU+"' WHERE MATERIA_ID = "+relacion+";");
                    System.out.println(pst1);
                    pst1.executeUpdate();
                    //pst.executeUpdate();
                }catch(SQLException ex){
                    Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                }
                sql="SELECT * FROM peleteriacid.proveedores WHERE PROV_NOMBRE = '"+Proveedor+"';";
                String IDProveedor="";
                try{
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        IDProveedor=Integer.toString(rs.getInt(1));
                    }

                    System.out.println("Id del proveedor con el nombre "+Proveedor+" es: "+IDProveedor);
                }catch(SQLException ex){
                    Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                }
                int id=Integer.parseInt(IDProveedor);
                try{
                    PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales_has_proveedores(MATERIA_ID, PROV_ID)"
                        +" VALUES ( ?, ?);");
                    pst.setInt(1, relacion);
                    pst.setInt(2, id);
                    System.out.println(pst);
                    pst.executeUpdate();
                }catch(SQLException ex){
                    Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(null, "El registro fue hecho con exito","Éxito",JOptionPane.OK_OPTION);
                LimpiarCampos();
                cmbTipo.setSelectedIndex(0);
                jPanel1.setVisible(false);
                int rows=modelito.getRowCount(), i=0;
                Double Total=0.0;
                while(i<rows){
                    Total+=Double.parseDouble(tblPedidos.getValueAt(i, 5).toString());
                    i++;
                }

                txtSubtotal.setText(String.valueOf(Total));
                double sub=0, Des=0;
                boolean[] field1=new boolean[1];
                field1[0]=txtDescuento.getText().isEmpty();
                if(!field1[0]){
                    Des=Double.parseDouble(txtDescuento.getText().toString());
                }
                double SUB=Total-Des;
                if(chkIVA.isSelected()){
                    SUB+=(SUB*0.16);
                }
                txtTotal.setText(String.valueOf(SUB));
                cmbProveedores.setEnabled(false);
            }
            else{

            }
        }else{
            JOptionPane.showMessageDialog(null, "Favor de seleccionar un proveedor","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void txtCostoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCostoKeyReleased
        boolean[] cant=new boolean[1];
        cant[0]=txtCosto.getText().isEmpty();
        double Costo=0;
        if(!cant[0]){
            Costo=Double.parseDouble(txtCosto.getText());

            double margen, precio;
            int Cantidad=0;
            boolean[] field=new boolean[2];
            field[0]=txtCantidad.getText().isEmpty();
            field[1]=txtMargen.getText().isEmpty();
            if(!field[0]){
                Cantidad=Integer.parseInt(txtCantidad.getText());
            }
            txtCosto1.setText(String.format("%.2f",(Cantidad*Costo)));
            if(!field[1]){
                margen=Double.parseDouble(txtMargen.getText());
                precio=Costo+margen;
                txtPrecio.setText(String.valueOf(precio));
            }
            
        }else{
            txtPrecio.setText("");
        }
        
    }//GEN-LAST:event_txtCostoKeyReleased

    private void txtCostoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCostoActionPerformed

    }//GEN-LAST:event_txtCostoActionPerformed

    private void txtCantidadKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadKeyReleased
        boolean[] cant=new boolean[1];
        cant[0]=txtCantidad.getText().isEmpty();
        int Cantidad=0;
        if(!cant[0])
        Cantidad=Integer.parseInt(txtCantidad.getText());
        
        double Costo=0.0;
        boolean[] field=new boolean[1];
        field[0]=txtCosto.getText().isEmpty();
        if(!field[0]){
            Costo=Double.parseDouble(txtCosto.getText());
        }
        txtCosto1.setText(String.format("%.2f",(Cantidad*Costo)));
        
    }//GEN-LAST:event_txtCantidadKeyReleased

    private void txtDescuentoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescuentoKeyReleased
        double Subtotal= Double.parseDouble(txtSubtotal.getText());
        boolean[] field=new boolean[1];
        field[0]=txtDescuento.getText().isEmpty();
        if(!field[0]){
        double Descuento= Double.parseDouble(txtDescuento.getText());
        
        double Total = 0.0;
        if(chkIVA.isSelected()==true){
            Total=(Subtotal-Descuento)*1.16;

        }else{
            Total=Subtotal-Descuento;
        }
        txtTotal.setText(String.format("%.2f",(Total)));
        }else{
            
        }
    }//GEN-LAST:event_txtDescuentoKeyReleased

    private void txtDescuentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescuentoKeyPressed

    }//GEN-LAST:event_txtDescuentoKeyPressed

    private void txtDescuentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescuentoActionPerformed

    }//GEN-LAST:event_txtDescuentoActionPerformed

    private void txtSubtotalPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtSubtotalPropertyChange

    }//GEN-LAST:event_txtSubtotalPropertyChange

    private void txtSubtotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSubtotalActionPerformed

    }//GEN-LAST:event_txtSubtotalActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jPanel1.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel modelito = (DefaultTableModel) tblPedidos.getModel();
        int rows=modelito.getRowCount(), i=0;
        int tipo=cmbUbicacion.getSelectedIndex();

        if(tipo!=0){
            int[] Cantidades=new int[rows];
            int[] Cantidad=new int[rows];
            String[] SKU=new String[rows];
            double[] costo=new double[rows];
            Double Descuento=0.0;
            String Notas="";
            boolean[] field = new boolean[2];
            field[0]=txtDescuento.getText().isEmpty();
            field[1]=txtNotas.getText().isEmpty();
            if(!field[0]){
                Descuento=Double.parseDouble(txtDescuento.getText());
            }
            if(!field[1]){
                Notas=txtNotas.getText();
            }
            String Ubicacion=cmbUbicacion.getSelectedItem().toString();
            String NoFactura=txtFactura.getText();
            Format formatter = new SimpleDateFormat("yyyy-MM-dd");
            String FechaPedido=formatter.format(datePedido.getDate());

            Double Subtotal=Double.parseDouble(txtSubtotal.getText());
            Double Total=Double.parseDouble(txtTotal.getText());
            double IVA=0.0;
            if(chkIVA.isSelected()){
                IVA=Double.parseDouble(String.format("%.2f",((Subtotal-Descuento)*0.16)));
            }else{

            }
            String PRO=cmbProveedores.getSelectedItem().toString();
            if(!PRO.equals("<Seleccione un Proveedor>")){
                if(chkPagado.isSelected()){
                    String FechaPago=formatter.format(datePago.getDate()), Metodo=cmbMetodo.getSelectedItem().toString();;
                    try{
                        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                        Date utilDate;
                        utilDate = new SimpleDateFormat("dd-MM-yyyy").parse(dateFormat.format(datePedido.getDate()));
                        java.sql.Date sqlDate1 = new java.sql.Date(utilDate.getTime());
                        Date utilDate1;
                        utilDate1 = new SimpleDateFormat("dd-MM-yyyy").parse(dateFormat.format(datePago.getDate()));
                        java.sql.Date sqlDate2 = new java.sql.Date(utilDate1.getTime());
                        PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.facturas(FACTURA_FECHA, FACTURA_UBICACION, FACTURA_NUMERO, FACTURA_SUBTOTAL, FACTURA_TOTAL, FACTURA_DESCUENTO, FACTURA_FECHADEPAGO, FACTURA_NOTAS, FACTURA_IVA, FACTURA_PROVEEDOR, FACTURA_METODO, FACTURA_ESTATUS)"
                            +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                        pst.setDate(1, sqlDate1);
                        pst.setString(2, Ubicacion);
                        pst.setString(3, NoFactura);
                        pst.setDouble(4, Subtotal);
                        pst.setDouble(5, Total);
                        pst.setDouble(6, Descuento);
                        pst.setDate(7, sqlDate2);
                        pst.setString(8, Notas);
                        pst.setDouble(9, IVA);
                        pst.setString(10, PRO);
                        pst.setString(11, Metodo);
                        pst.setString(12, "Pagado");
                        System.out.println(pst);
                        pst.executeUpdate();
                    }catch(SQLException ex){
                        Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                    }catch (ParseException ex) {
                        Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }else{
                    try{
                        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                        Date utilDate;
                        utilDate = new SimpleDateFormat("dd-MM-yyyy").parse(dateFormat.format(datePedido.getDate()));
                        java.sql.Date sqlDate1 = new java.sql.Date(utilDate.getTime());
                        PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.facturas(FACTURA_FECHA, FACTURA_UBICACION, FACTURA_NUMERO, FACTURA_SUBTOTAL, FACTURA_TOTAL, FACTURA_DESCUENTO, FACTURA_NOTAS, FACTURA_IVA, FACTURA_PROVEEDOR, FACTURA_ESTATUS)"
                            +" VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                        pst.setDate(1, sqlDate1);
                        pst.setString(2, Ubicacion);
                        pst.setString(3, NoFactura);
                        pst.setDouble(4, Subtotal);
                        pst.setDouble(5, Total);
                        pst.setDouble(6, Descuento);
                        pst.setString(7, Notas);
                        pst.setDouble(8, IVA);
                        pst.setString(9, PRO);
                        pst.setString(10, "Pendiente");
                        System.out.println(pst);
                        pst.executeUpdate();
                    }catch(SQLException ex){
                        Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                    }catch (ParseException ex) {
                        Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                //Comienza recorrido de id's
                DefaultTableModel modelote=new DefaultTableModel();
                modelote.addColumn("id");
                tblContenido2.setModel(modelote);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[1];

                sql="SELECT FACTURA_ID"
                + " FROM peleteriacid.facturas ORDER BY FACTURA_ID DESC;";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);
                    while (rs.next()){
                        datos[0]=String.valueOf(rs.getInt(1));
                        modelote.addRow(datos);
                    }
                    tblContenido2.setModel(modelote);
                    rs.close();
                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                //Wait up
                int ID=Integer.parseInt(tblContenido2.getValueAt(0, 0).toString());

                while(i<rows){
                    Cantidades[i]=Integer.parseInt(tblPedidos.getValueAt(i, 3).toString());
                    SKU[i]=tblPedidos.getValueAt(i, 0).toString();
                    Cantidad[i]=Integer.parseInt(tblPedidos.getValueAt(i, 4).toString());
                    costo[i]=Double.parseDouble(tblPedidos.getValueAt(i, 5).toString());
                    i++;
                }
                i=0;
                while(i<rows){
                    String MaterialID="";

                    sql="SELECT MATERIA_ID"
                    + " FROM peleteriacid.materiales WHERE MATERIA_SKU = '"+SKU[i]+"';";
                    try {
                        st=cn.createStatement();
                        rs=st.executeQuery(sql);

                        while (rs.next()){
                            MaterialID=Integer.toString(rs.getInt(1));
                        }
                        rs.close();
                        System.out.println("Id del material con el SKU "+SKU[i]+" es: "+MaterialID);

                    }catch(SQLException ex){
                        Logger.getLogger(RegistrarVenta.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    String PROVNOM=cmbProveedores.getSelectedItem().toString();
                    int IDProv=0;
                    sql="SELECT PROV_ID"
                    + " FROM peleteriacid.proveedores WHERE PROV_NOMBRE = '"+PROVNOM+"';";
                    try {
                        st=cn.createStatement();
                        rs=st.executeQuery(sql);

                        while (rs.next()){
                            IDProv=rs.getInt(1);
                        }
                        rs.close();

                    }catch(SQLException ex){
                        Logger.getLogger(RegistrarVenta.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    int IDsku=Integer.parseInt(MaterialID);
                    try{
                        PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales_has_proveedores(MATERIA_ID, PROV_ID)"
                            +" VALUES ( ?, ?);");
                        pst.setInt(1, IDsku);
                        pst.setInt(2, IDProv);
                        System.out.println(pst);
                        pst.executeUpdate();
                    }catch(SQLException ex){
                        Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try{
                        PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales_has_facturas(MATERIA_ID, FACTURA_ID, MATERIA_CANTIDAD, MATERIA_COSTO)"
                            +" VALUES ( ?, ?, ?, ?);");
                        pst.setInt(1, IDsku);
                        pst.setInt(2, ID);
                        pst.setInt(3, Cantidades[i]);
                        pst.setDouble(4, costo[i]);
                        System.out.println(pst);
                        pst.executeUpdate();
                    }catch(SQLException ex){
                        Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    i++;
                }
                i=0;
                while(i<rows){
                    try{
                        PreparedStatement pst1=cn.prepareStatement("UPDATE peleteriacid.materiales "
                            +"SET MATERIA_CANTIDAD = "+Cantidad[i]+" WHERE MATERIA_SKU = '"+SKU[i]
                            +"';");
                        System.out.println(pst1);
                        pst1.executeUpdate();
                    }catch(SQLException ex){
                        Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);

                    }
                    i++;
                }

                Consulta();
                LimpiarCamposFactura();
                JOptionPane.showMessageDialog(null, "El registro fue hecho con exito","Éxito",JOptionPane.OK_OPTION);
            }else{
                JOptionPane.showMessageDialog(null, "Favor de un proveedor","Error",JOptionPane.ERROR_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Favor de seleccionar la ubicación","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmbTipo1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cmbTipo1PropertyChange

    }//GEN-LAST:event_cmbTipo1PropertyChange

    private void cmbTipo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTipo1ActionPerformed
        int Tipo=cmbTipo1.getSelectedIndex();
        switch (Tipo){
            case 1:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Agujas';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 2:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Agujetas';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 13:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Hebillas y adornos';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 19:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Pinturas';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 25:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];
                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Tapetes';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 8:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Claves y tachuelas';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 23:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Tacones';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 9:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Correas y látigos';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 21:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Remaches';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 22:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Suelas';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 24:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Tapas y firmes';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 12:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Grasas y ceras';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 26:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Tintas';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 20:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Plantillas y taloneras';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 15:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Hilos';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 18:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Piel';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 10:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Cámara de avión';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 17:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Pegamento';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 7:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Cierres';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 4:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Brochas y cepillos';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 11:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Fibras';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 14:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Herramienta';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 6:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Cerco';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 16:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Lijas';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 5:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_COSTO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Carretes';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            case 3:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");

                tblLista.setModel(modelo);
                String sql;
                ResultSet rs;
                Statement st;
                String[] datos=new String[5];

                sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_CANTIDAD, MATERIA_PRECIO, MATERIA_COLOR"
                + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Aseo';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        datos[0]=rs.getString(1);
                        datos[1]=rs.getString(2);
                        datos[2]=rs.getString(5);
                        datos[3]=Integer.toString(rs.getInt(3));
                        datos[4]=Double.toString(rs.getDouble(4));
                        modelo.addRow(datos);
                    }
                    tblLista.setModel(modelo);
                    rs.close();

                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;}
            default:{
                DefaultTableModel modelo=new DefaultTableModel();
                modelo.addColumn("SKU");
                modelo.addColumn("Modelo");
                modelo.addColumn("Color");
                modelo.addColumn("Existencia");
                modelo.addColumn("Costo");
                tblLista.setModel(modelo);
                break;
            }
        }
    }//GEN-LAST:event_cmbTipo1ActionPerformed

    private void txtMargenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMargenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMargenActionPerformed

    private void txtMargenKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMargenKeyTyped
        
        
    }//GEN-LAST:event_txtMargenKeyTyped

    private void txtMargenKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMargenKeyReleased
        boolean[] mangin=new boolean[1];
        mangin[0]=txtMargen.getText().isEmpty();
        double margen=0.0;
        if(!mangin[0]){
        margen=Double.parseDouble(txtMargen.getText());
        
        double Costo=0.0;
        double Precio=0.0;
        boolean[] field=new boolean[2];
        field[0]=txtCosto.getText().isEmpty();
        field[1]=txtPrecio.getText().isEmpty();
            if(!field[0]){
                Costo=Double.parseDouble(txtCosto.getText());

            Precio=margen+Costo;
            txtPrecio.setText(String.valueOf(Precio));
            }
        }else{
            txtPrecio.setText("");
        }
    }//GEN-LAST:event_txtMargenKeyReleased

    private void txtPrecioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioKeyReleased
        boolean[] price=new boolean[1];
        price[0]=txtPrecio.getText().isEmpty();
        double Precio=0.0;
        if(!price[0]){
        Precio=Double.parseDouble(txtPrecio.getText());
        
        double Costo=0.0;
        double Margen=0.0;
        boolean[] field=new boolean[1];
        field[0]=txtCosto.getText().isEmpty();
            if(!field[0]){
                Costo=Double.parseDouble(txtCosto.getText());

            Margen=Precio-Costo;
            txtMargen.setText(String.valueOf(Margen));
            }
        }else {
            txtMargen.setText("");
        }   
    }//GEN-LAST:event_txtPrecioKeyReleased

    private void txtPrecio1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecio1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecio1KeyReleased

    private void txtPrecio2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecio2KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecio2KeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgregarMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgregarMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgregarMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgregarMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgregarMaterial().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Seleccional;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JCheckBox chkIVA;
    private javax.swing.JCheckBox chkPagado;
    private javax.swing.JComboBox<String> cmbMetodo;
    private javax.swing.JComboBox<String> cmbProveedores;
    private javax.swing.JComboBox<String> cmbTipo;
    private javax.swing.JComboBox<String> cmbTipo1;
    private javax.swing.JComboBox<String> cmbUbicacion;
    private com.toedter.calendar.JDateChooser datePago;
    private com.toedter.calendar.JDateChooser datePedido;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbModelo;
    private javax.swing.JLabel lblAncho;
    private javax.swing.JLabel lblAnchocm;
    private javax.swing.JLabel lblColor;
    private javax.swing.JLabel lblEspesor;
    private javax.swing.JLabel lblEspesorcm;
    private javax.swing.JLabel lblLargo;
    private javax.swing.JLabel lblLargocm;
    private javax.swing.JLabel lblLitros;
    private javax.swing.JLabel lblMarca;
    private javax.swing.JLabel lblMedida;
    private javax.swing.JLabel lblUnidades;
    private javax.swing.JTable tblContenido;
    private javax.swing.JTable tblContenido2;
    private javax.swing.JTable tblLista;
    private javax.swing.JTable tblPedidos;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtColor;
    private javax.swing.JTextField txtCosto;
    private javax.swing.JTextField txtCosto1;
    private javax.swing.JTextField txtDescuento;
    private javax.swing.JTextField txtFactura;
    private javax.swing.JTextField txtMarca;
    private javax.swing.JTextField txtMargen;
    private javax.swing.JTextField txtMedidaAncho;
    private javax.swing.JTextField txtMedidaEspesor;
    private javax.swing.JTextField txtMedidaLargo;
    private javax.swing.JTextField txtModelo;
    private javax.swing.JTextArea txtNotas;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtPrecio1;
    private javax.swing.JTextField txtPrecio2;
    private javax.swing.JTextField txtSubtotal;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
Conectar cc = new Conectar();
Connection cn = cc.conexion();
}
