/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Paquete;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Gloria
 */
public class RegistrarVenta extends javax.swing.JFrame {

    /**
     * Creates new form RegistrarVenta
     */
    int Option;
    DefaultTableModel modelito=new DefaultTableModel();
    public RegistrarVenta() {
        initComponents();
        
                modelito.addColumn("SKU");
                modelito.addColumn("Modelo");
                modelito.addColumn("Color");
                modelito.addColumn("Cantidad Requisitada");
                modelito.addColumn("Cantidad Existente");
                modelito.addColumn("Total");
                tblSeleccion.setModel(modelito);
        tblContenido.setVisible(false);
        jScrollPane4.setVisible(false);
        btnCalcula.setEnabled(false);
        Option=JOptionPane.showOptionDialog(this, "¿Desea registrar la venta a boleros?","Elección",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Si","No"},"No");
        System.out.println(Option);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        SeleccionaProducto = new javax.swing.JMenuItem();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jLabel9 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblLista = new javax.swing.JTable();
        cmbTipo = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblSeleccion = new javax.swing.JTable();
        btnCalcula = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblContenido = new javax.swing.JTable();
        txtTotal = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        cmbMetodo = new javax.swing.JComboBox<>();

        SeleccionaProducto.setText("Seleccionar Producto");
        SeleccionaProducto.setToolTipText("");
        SeleccionaProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeleccionaProductoActionPerformed(evt);
            }
        });
        jPopupMenu1.add(SeleccionaProducto);

        jMenuItem1.setText("Quitar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu2.add(jMenuItem1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 153, 102));
        jLabel9.setText("REGISTRO DE VENTAS");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Elija un producto"));

        tblLista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblLista.setComponentPopupMenu(jPopupMenu1);
        jScrollPane2.setViewportView(tblLista);

        jScrollPane1.setViewportView(jScrollPane2);

        cmbTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tipo de Material", "Agujas", "Agujetas", "Aseo", "Brochas y cepillos", "Carretes", "Cerco", "Cierres", "Clavos y tachuelas", "Correas y látigos", "Cámara de avión", "Fibras", "Grasas y ceras", "Hebillas y adornos", "Herramienta", "Hilos", "Lijas", "Pegamento", "Piel", "Pinturas", "Plantillas y taloneras", "Remaches", "Suelas", "Tacones", "Tapas y Firmes", "Tapetes", "Tintas" }));
        cmbTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTipoActionPerformed(evt);
            }
        });
        cmbTipo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                cmbTipoPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 745, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(cmbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(cmbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Productos Seleccionados"));

        tblSeleccion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblSeleccion.setComponentPopupMenu(jPopupMenu2);
        tblSeleccion.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblSeleccionPropertyChange(evt);
            }
        });
        jScrollPane3.setViewportView(tblSeleccion);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 739, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        btnCalcula.setText("Calcular");
        btnCalcula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculaActionPerformed(evt);
            }
        });

        tblContenido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(tblContenido);

        txtTotal.setEnabled(false);

        jLabel1.setText("Total:");

        cmbMetodo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Método de pago>", "Efectivo", "Tarjeta de crédito", "Vales" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(jLabel9))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(41, 41, 41)
                            .addComponent(btnCalcula, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 270, Short.MAX_VALUE)
                            .addComponent(cmbMetodo, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(54, 54, 54)
                            .addComponent(jLabel1)
                            .addGap(18, 18, 18)
                            .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jSeparator1)
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(32, 32, 32)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbMetodo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnCalcula, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1)))
                        .addGap(0, 20, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTipoActionPerformed
        int Tipo=cmbTipo.getSelectedIndex();
        switch (Tipo){
              case 1:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Agujas';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
            break;}
              case 2:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Agujetas';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
              case 13:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Hebillas y adornos';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
            break;}
              case 19:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Pinturas';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
            break;}
              case 25:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Tapetes';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
              case 8:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Clavos y tachuelas';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
            break;}
            case 23:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Tacones';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
            case 9:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Correas y látigos';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
            case 21:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Remaches';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
            case 22:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Suelas';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
            case 24:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Tapas y firmes';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
            case 12:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Grasas y ceras';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
            case 26:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Tintas';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
            case 20:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Plantillas y taloneras';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
            case 15:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Hilos';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
            case 18:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Piel';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
            case 10:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Cámara de avión';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
            case 17:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Pegamento';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
            case 7:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Cierres';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
            case 4:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Brochas y cepillos';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
            case 11:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Fibras';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
            case 14:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Herramienta';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
            case 6:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Cerco';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
            case 16:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Lijas';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
            case 5:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Carretes';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
            case 3:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        
        tblLista.setModel(modelo);
        String sql;
        ResultSet rs;
        Statement st;
        String[] datos=new String[5];
        
            sql="SELECT MATERIA_SKU, MATERIA_MODELO, MATERIA_COLOR, MATERIA_CANTIDAD, MATERIA_PRECIO"
                    + " FROM peleteriacid.materiales WHERE MATERIA_TIPO = 'Aseo';";
        try {
            st=cn.createStatement();
            rs=st.executeQuery(sql);
            
            while (rs.next()){
                datos[0]=rs.getString(1);
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=Integer.toString(rs.getInt(4));
                datos[4]=Double.toString(rs.getDouble(5));
                modelo.addRow(datos);
            }
            tblLista.setModel(modelo);
            rs.close();
            
        }catch(SQLException ex){
            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
        }
        break;}
              default:{
                  DefaultTableModel modelo=new DefaultTableModel();
        modelo.addColumn("SKU");
        modelo.addColumn("Modelo");
        modelo.addColumn("Color");
        modelo.addColumn("Cantidad Existente");
        modelo.addColumn("Precio");
        tblLista.setModel(modelo);
                  break;
              }
        }
    }//GEN-LAST:event_cmbTipoActionPerformed

    private void cmbTipoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cmbTipoPropertyChange

    }//GEN-LAST:event_cmbTipoPropertyChange

    private void SeleccionaProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeleccionaProductoActionPerformed
        btnCalcula.setEnabled(true);
        int fila = tblLista.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblLista.getModel();
        if(fila>=0){
            int existencia=Integer.parseInt(tblLista.getValueAt(fila, 3).toString());
            String SKU=tblLista.getValueAt(fila, 0).toString();
            String Modelo=tblLista.getValueAt(fila, 1).toString();
            String Color=tblLista.getValueAt(fila, 2).toString();
            int Mayoreo=0;
            double PrecioMayoreo=0.0, PrecioBoleros=0.0, Precio=0.0;
            String sql="SELECT MATERIA_CANT_MAYOREO, MATERIA_PRECIO_MAYOREO, MATERIA_PRECIO_BOLEROS FROM peleteriacid.materiales WHERE MATERIA_SKU = '"+SKU+"';";
            ResultSet rs;
            Statement st;
            try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);
                    while (rs.next()){
                        Mayoreo=rs.getInt(1);
                        PrecioMayoreo=rs.getDouble(2);
                        PrecioBoleros=rs.getDouble(3);
                    }
                    rs.close();
                }catch(SQLException ex){
                    Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                }
            if(existencia>0){
                int Cantidad=Integer.parseInt(JOptionPane.showInputDialog(null, "Escoja la cantidad unitaria del producto", "Cantidad", 
                    JOptionPane.WARNING_MESSAGE));
                if(Option!=1){
                    Precio=PrecioBoleros;
                }else{
                    
                    //Mayoreo
                    if(Cantidad>=Mayoreo){
                    Precio=PrecioMayoreo;
                    }else{
                    Precio=Double.parseDouble(tblLista.getValueAt(fila, 4).toString());
                    }
                    //Fin mayoreo
                }
            if(Cantidad>existencia){
                JOptionPane.showMessageDialog(null, "No existe esa cantidad de producto por el momento");
            }else{
                String[] datos=new String[6];
                datos[0]=SKU;
                datos[1]=Modelo;
                datos[2]=Color;
                datos[3]=String.valueOf(Cantidad);
                datos[4]=String.valueOf(existencia);
                datos[5]=String.valueOf(Precio*Cantidad);
                
                modelito.addRow(datos);
                 
            tblSeleccion.setModel(modelito);
            
            Double suma=0.0;
            int rows=modelito.getRowCount(), i=0;
            while(i<rows){
                String Suma=tblSeleccion.getValueAt(i, 5).toString();
                suma+=Double.parseDouble(Suma);
                i++;
            }
            txtTotal.setText(String.valueOf(suma));
            
            }
            }else{
              JOptionPane.showMessageDialog(null, "El producto no esta disponible por el momento");  
            }
        }else{
            JOptionPane.showMessageDialog(null, "No seleccionó ninguna fila");
        }
    }//GEN-LAST:event_SeleccionaProductoActionPerformed

    private void btnCalculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculaActionPerformed
        int rows=modelito.getRowCount(), i=0;
            String[] SKUs=new String [rows];
            int[] Cantidad=new int [rows];
            int[] Existencia=new int [rows];
            double[] Costo=new double [rows];
            double[] Precio=new double [rows];
            Double Total=0.0;
            while(i<rows){
                String SKUSeleccion=tblSeleccion.getValueAt(i, 0).toString();
                SKUs[i]=SKUSeleccion;
                Existencia[i]=Integer.parseInt(tblSeleccion.getValueAt(i, 4).toString());
                Cantidad[i]=Integer.parseInt(tblSeleccion.getValueAt(i, 3).toString());
                int Mayoreo=0;
                double PrecioMayoreo=0.0, PrecioBoleros=0.0;
                    String sql="SELECT MATERIA_CANT_MAYOREO, MATERIA_PRECIO_MAYOREO, MATERIA_PRECIO_BOLEROS FROM peleteriacid.materiales WHERE MATERIA_SKU = '"+SKUs[i]+"';";
                    ResultSet rs;
                    Statement st;
                    try {
                            st=cn.createStatement();
                            rs=st.executeQuery(sql);
                            while (rs.next()){
                                Mayoreo=rs.getInt(1);
                                PrecioMayoreo=rs.getDouble(2);
                                PrecioBoleros=rs.getDouble(3);
                            }
                            rs.close();
                        }catch(SQLException ex){
                            Logger.getLogger(ListarMateriales.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    if(Option!=1){
                    Precio[i]=PrecioBoleros;
                }else{
                    
                    //Mayoreo
                    if(Cantidad[i]>=Mayoreo){
                    Precio[i]=PrecioMayoreo;
                    }else{
                    Precio[i]=Double.parseDouble(tblSeleccion.getValueAt(i, 5).toString());
                    }
                    //Fin mayoreo
                }
                double PrecioTotal=Double.parseDouble(tblSeleccion.getValueAt(i, 5).toString());
                Total+=PrecioTotal;
                
                i++;
            }
            String Metodo=cmbMetodo.getSelectedItem().toString();
            try{
                PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.pedidos(PEDIDO_TOTAL, PEDIDO_FECHA, PEDIDO_METODODEPEGO)"
                    +" VALUES ( ?, ?, ?);");
                Date fecha = new Date();
                DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                Date utilDate = new SimpleDateFormat("dd-MM-yyyy").parse(dateFormat.format(fecha));
                java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
                pst.setDouble(1, Total);
                pst.setDate(2, sqlDate);
                pst.setString(3, Metodo);
                System.out.println(pst);
                pst.executeUpdate();

            }catch(SQLException ex){
                Logger.getLogger(RegistrarVenta.class.getName()).log(Level.SEVERE, null, ex);
            }catch (ParseException ex) {
            Logger.getLogger(RegistrarVenta.class.getName()).log(Level.SEVERE, null, ex);
        }


            /*Agregar tabla para recorrer el primer valor del id de pedido*/
            DefaultTableModel modelo=new DefaultTableModel();
            modelo.addColumn("ID");
            tblContenido.setModel(modelo);
            String sql;
            ResultSet rs;
            Statement st;
            String[] datos=new String[1];
              sql="SELECT PEDIDO_ID"
                      + " FROM peleteriacid.pedidos ORDER BY PEDIDO_ID DESC;";

            try {
                st=cn.createStatement();
                rs=st.executeQuery(sql);
                System.out.println(sql);

                while (rs.next()){
                    datos[0]=Integer.toString(rs.getInt(1));
                    modelo.addRow(datos);
                }

                tblContenido.setModel(modelo);
                rs.close();
                }catch(SQLException ex){
                Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
            }   
                int relacion=Integer.parseInt(tblContenido.getValueAt(0, 0).toString());
            /*wait*/
            i=0;
            while(i<rows){
                String MaterialID="";

                sql="SELECT MATERIA_ID, MATERIA_COSTO"
                + " FROM peleteriacid.materiales WHERE MATERIA_SKU = '"+SKUs[i]+"';";
                try {
                    st=cn.createStatement();
                    rs=st.executeQuery(sql);

                    while (rs.next()){
                        MaterialID=Integer.toString(rs.getInt(1));
                        Costo[i]=rs.getDouble(2);
                    }
                    rs.close();
                    System.out.println("Id del material con el SKU "+SKUs[i]+" es: "+MaterialID);
                    
                }catch(SQLException ex){
                        Logger.getLogger(RegistrarVenta.class.getName()).log(Level.SEVERE, null, ex);
                }
                int ID=Integer.parseInt(MaterialID);
                try{
                PreparedStatement pst =cn.prepareStatement("INSERT INTO peleteriacid.materiales_has_PEDIDOS(PEDIDO_ID, MATERIA_ID, CANTIDAD, TOTAL, GANANCIA)"
                      +" VALUES ( ?, ?, ?, ?, ?);");
                  pst.setInt(1, relacion);
                  pst.setInt(2, ID);
                  pst.setInt(3, Cantidad[i]);
                  pst.setDouble(4, (Precio[i]*Cantidad[i]));
                  pst.setDouble(5, (Precio[i]*Cantidad[i])-(Costo[i]*Cantidad[i]));
                  System.out.println(pst);
                  pst.executeUpdate();
                  }catch(SQLException ex){
                  Logger.getLogger(AgregarMaterial.class.getName()).log(Level.SEVERE, null, ex);
                  }
                try{                   
                    PreparedStatement pst1=cn.prepareStatement("UPDATE peleteriacid.materiales "
                    +"SET MATERIA_CANTIDAD = "+ (Existencia[i]-Cantidad[i])
                    +" WHERE MATERIA_SKU = '"+SKUs[i]+"'"
                    +";");
                    System.out.println(pst1);
                    pst1.executeUpdate();
                }catch(SQLException ex){
                    Logger.getLogger(RegistrarVenta.class.getName()).log(Level.SEVERE, null, ex);

                }
                i++;
            }
            JOptionPane.showMessageDialog(this, "¡Venta registrada!");
            cmbMetodo.setSelectedIndex(0);
    }//GEN-LAST:event_btnCalculaActionPerformed

    private void tblSeleccionPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblSeleccionPropertyChange
        
            
    }//GEN-LAST:event_tblSeleccionPropertyChange

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        int row=tblSeleccion.getSelectedRow();
        if(row>=0){
            modelito.removeRow(row);
        }else{
            JOptionPane.showMessageDialog(null, "No seleccionó ninguna fila");
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistrarVenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistrarVenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistrarVenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrarVenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistrarVenta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem SeleccionaProducto;
    private javax.swing.JButton btnCalcula;
    private javax.swing.JComboBox<String> cmbMetodo;
    private javax.swing.JComboBox<String> cmbTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tblContenido;
    private javax.swing.JTable tblLista;
    private javax.swing.JTable tblSeleccion;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
Conectar cc=new Conectar();
Connection cn=cc.conexion();
}
